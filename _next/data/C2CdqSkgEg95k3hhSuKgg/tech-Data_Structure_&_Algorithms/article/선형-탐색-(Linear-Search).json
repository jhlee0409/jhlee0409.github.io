{"pageProps":{"categories":[{"title":"blockchain","sub":[{"title":"DApp","count":1},{"title":"solidity","count":4}]},{"title":"platform","sub":[{"title":"AWS","count":2},{"title":"Google Analytics 4","count":1}]},{"title":"tech","sub":[{"title":"CS","count":1},{"title":"CSS","count":2},{"title":"Data_Structure_&_Algorithms","count":14},{"title":"HTML","count":1},{"title":"javascript","count":4},{"title":"markdown","count":1},{"title":"Next.js","count":1},{"title":"programming","count":3},{"title":"react","count":2},{"title":"refactoring","count":3},{"title":"typescript","count":2}]}],"data":{"title":"선형 탐색 (Linear Search)","date":"2022-10-04","tags":["TIL","Udemy","Algorithm","선형 탐색","Linear Search"],"draft":false,"summary":"선형 탐색에 대해 알아보자"},"content":"\r\n&nbsp;\r\n\r\n# 선형 탐색 (Linear Search)\r\n\r\n- 간단히 설명해서 인수로 배열과 `value`를 넘겨받은 선형 탐색 함수가 있다고 가정할 때\r\n- 배열의 처음부터 끝까지 돌면서 `value`와 일치하는 값을 찾아내는 것이다.\r\n- 자바스크립트에도 선형 탐색을 이용한 메소드들이 있다.\r\n  1. `indexOf`\r\n  2. `includes`\r\n  3. `find`\r\n  4. `findIndex`\r\n\r\n&nbsp;\r\n\r\n## 선형 탐색 구현\r\n\r\n> e.g. 배열과 값을 인수로 받는 함수가 있고, 배열을 돌면서 값과 일차는 배열의 값을 찾으면 해당 index를 리턴하고 찾지 못하면 -1을 리턴해라\r\n\r\n&nbsp;\r\n\r\n## 단순 for문을 이용한 방식\r\n- 시간 복잡도 : `O(n)`\r\n```jsx\r\nconst  linearSearch = (arr, value) => {\r\n\tfor(let i = 0; i < arr.length; i++) {\r\n\t\tif(arr[i] === value) return i;\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\nlinearSearch([10, 15, 20, 25, 30], 15) // 1\r\nlinearSearch([9, 8, 7, 6, 5, 4, 3, 2, 1, 0], 4) // 5\r\nlinearSearch([100], 100) // 0\r\nlinearSearch([1,2,3,4,5], 6) // -1\r\nlinearSearch([9, 8, 7, 6, 5, 4, 3, 2, 1, 0], 10) // -1\r\nlinearSearch([100], 200) // -1\r\n```\r\n\r\n&nbsp;\r\n\r\n## Helper 메소드를 이용해본 방식\r\n```jsx\r\nconst  linearSearch = (arr, value) => {\r\n    let result = 0;\r\n    const helper = (arr) => {\r\n        if(arr.length === 0) return result = -1;\r\n        if(arr[0] === value) {\r\n            return result;\r\n        } else {\r\n            result ++;\r\n            helper(arr.slice(1));\r\n        }\r\n    }\r\n    helper(arr);\r\n    return result;\r\n}\r\n\r\nlinearSearch([10, 15, 20, 25, 30], 15) // 1\r\nlinearSearch([9, 8, 7, 6, 5, 4, 3, 2, 1, 0], 4) // 5\r\nlinearSearch([100], 100) // 0\r\nlinearSearch([1,2,3,4,5], 6) // -1\r\nlinearSearch([9, 8, 7, 6, 5, 4, 3, 2, 1, 0], 10) // -1\r\nlinearSearch([100], 200) // -1\r\n```\r\n\r\n---\r\n\r\n#### 피드백은 언제나 환영입니다."},"__N_SSG":true}