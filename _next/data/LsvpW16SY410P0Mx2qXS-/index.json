{"pageProps":{"categories":[{"title":"blockchain","sub":[{"title":"DApp","count":1},{"title":"solidity","count":4}]},{"title":"platform","sub":[{"title":"AWS","count":2},{"title":"Google Analytics 4","count":1}]},{"title":"tech","sub":[{"title":"CS","count":1},{"title":"CSS","count":2},{"title":"Data_Structure_&_Algorithms","count":3},{"title":"HTML","count":1},{"title":"javascript","count":4},{"title":"markdown","count":1},{"title":"Next.js","count":1},{"title":"programming","count":3},{"title":"react","count":2},{"title":"refactoring","count":3},{"title":"typescript","count":2}]}],"data":[{"data":{"title":"빈도수 카운터 패턴 (Frequency Counters Pattern)","date":"2022-09-24","tags":["TIL","Udemy","Algorithm","빈도수 카운터 패턴","Frequency Counters Pattern"],"draft":false,"summary":"여러 문제해결 패턴 중 빈도수 카운터 패턴에 대해 알아보자","mainCategory":"tech","subCategory":"Data_Structure_&_Algorithms"},"content":"\r\n# 1. 빈도수 카운터 패턴 (Frequency Counters Pattern)\r\n\r\n- 자바스크립트의 객체를 이용해서 값과 빈도수를 체크한다.\r\n- 두 개의 배열을 객체로 세분화하고 각 배열의 요소들을 분류하고 비교한다.\r\n\r\n&nbsp;\r\n\r\n> e.g. 2개의 배열을 이용하는 same 함수가 있다. 두번째 배열의 값들은 첫번쨰 배열의 값들의 제곱이다. 각 값들의 빈도 수가 같아야한다.\r\n\r\n\r\n## 일반적인 패턴 `O(n^2)`\r\n\r\n- `for문`과 `indexOf`메소드를 이용한 이중 반복문\r\n\r\n```js\r\nconst same = (first, second) => {\r\n    // 두 배열의 길이가 다르면 false\r\n    if (first.length !== second.length) return false;\r\n    for (const i in first) {\r\n        // 두번째 배열에 매칭되는 인덱스 찾기\r\n        const correct = second.indexOf(first[i] ** 2);\r\n        // 없으면 false\r\n        if (correct === -1) return false;\r\n        // 있으면 체크 후 제거\r\n        second.splice(correct, 1);\r\n    }\r\n    return true;\r\n  };\r\n\r\nsame([1, 2, 3, 2], [4, 1, 9, 4])\r\n```\r\n\r\n## 빈도  카운터 패턴 `O(n)`\r\n\r\n- 이중 반복문을 돌리는 대신 각 배열을 한번씩반 반복문 적용\r\n- 이중 반복문보다 빠르다.\r\n- 두 객체를 사용해서 각 배열 `value`의 빈도수를 체크 (`value`가 각 배열에서 몇 번나왔는지 알 수 있다.)\r\n- 만둘어진 객체의 `key`를 체크하는 반복문을 작성해서 하나의 객체에만 적용시켜주면 됨 (여기서는 `frequencyCounter1`)\r\n```js\r\nconst same = (first, second) => {\r\n    if (first.length !== second.length) return false;\r\n    let frequencyCounter1 = {}; // {1: 1, 2: 2, 3: 1}\r\n    let frequencyCounter2 = {}; // {1: 1, 4: 2, 9: 1}\r\n    for (const val of first) {\r\n        // 없으면 1로 있으면 1씩 더함\r\n        frequencyCounter1[val] = (frequencyCounter1[val] || 0) + 1;\r\n    }\r\n    for (const val of second) {\r\n        // 없으면 1로 있으면 1씩 더함\r\n        frequencyCounter2[val] = (frequencyCounter2[val] || 0) + 1;\r\n    }\r\n    for (const key in frequencyCounter1) {\r\n        // 매칭되는 key가 있는지 체크\r\n        if (!(key ** 2 in frequencyCounter2)) {\r\n            return false;\r\n        }\r\n        // 해당 key를 이용해서 매칭되눈 value의 빈도수가 같은지 체크\r\n        if (frequencyCounter2[key ** 2] !== frequencyCounter1[key]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n  };\r\n\r\nsame([1, 2, 3, 2], [4, 1, 9, 4])\r\n```\r\n\r\n---\r\n\r\n#### 피드백은 언제나 환영입니다.","path":"빈도수 카운터 패턴 (Frequency Counters Pattern)"},{"data":{"title":"빅오로 보는 배열과 객체의 성능 평가","date":"2022-09-22","tags":["TIL","Udemy","Data Structure","빅오","Big O","Object","Array"],"draft":false,"summary":"배열과 객체 그리고 내장된 메소드들의 성능은?","mainCategory":"tech","subCategory":"Data_Structure_&_Algorithms"},"content":"\r\n# 1. 객체(Object)의 빅오(Big O)\r\n\r\n- 객체는 정렬되어 있지 않다.\r\n- 저장, 접근, 제거, 수정의 경우 `O(1)`이 걸린다.\r\n- 탐색은 단순하게 `key`에 접근하는 것이 아닌 `value`를 가져와야하기에 `O(n)`이 걸린다.\r\n\r\n    ```js\r\n     const obj = { name: \"jack\", age: 0 };\r\n    // 'jack' 이라는 값이 어디에 저장되어 있는가를 알기위해서는 모든 `key`값을 돌며 `value`를 체크해야한다.\r\n    ```\r\n\r\n- `Object.keys, Object.values, Object.entries` 메소드들의 경우 `O(n)`이 걸린다.\r\n    - 객체를 돌며 다 배열에 담아 반환해야하기 떄문이다.\r\n- `hasOwnProperty`의 경우 `O(1)`이 걸린다.\r\n    - `key`가 있는지 없는지 바로 접근이 가능하기 때문이다.\r\n\r\n&nbsp;\r\n\r\n# 2. 배열(Array)의 빅오(Big O)\r\n\r\n- 배열은 정렬된 데이터이다. 그렇기에 각 값에 인덱스가 붙어있다.\r\n\r\n- 접근의 경우 `O(1)`이 걸린다.\r\n    - `index`로 바로 접근하면 되기 때문이다.\r\n\r\n- 탐색은 객체와 동일하게 `O(n)`이 걸린다.\r\n\r\n- 저장의 경우 어디에 저장하느냐에 따라 빅오가 달라진다.\r\n    - `push`메소드는 배열의 끝에 저장하기 때문에 `O(1)`이 걸린다.\r\n    - `unshift`메소드는 배열의 처음에 저장하기 때문에 `O(n)`이 걸린다.\r\n\r\n- 제거의 경우도 어디를 제거하느냐에 따라 빅오가 달라진다.\r\n  - `pop` 메소드는 배열의 끝값을 제거하기 때문에 `O(1)`이 걸린다.\r\n  - `shift`메소드는 배열의 처음값을 제거하기 때문에 `O(n)`이 걸린다.\r\n\r\n&nbsp;\r\n\r\n## 왜? 같은 저장, 제거인데 다르죠?\r\n\r\n- 인덱스 번호의 재배치 때문이다.\r\n- 배열의 끝에 `저장/제거`하는 경우는 끝에 값이 있기 때문에 다른 값들의 인덱스는 변화가 없다.\r\n- 하지만 배열의 처음에 `저장/제거`하는 경우는 그 작업을 수행한 후 나머지 값들의 인덱스를 재배치 해주어야하기 때문이다.\r\n\r\n    ```js\r\n    // 기존의 0번 인덱스에 위치한 값은 \"A\"이지만 shift 호출이후 \"B\"로 바뀌게 된다.\r\n    // 즉, 0번 인덱스의 값이 제거가 되면 나머지 값들의 인덱스 번호가 하나씩 떙겨져 재배치 된다.\r\n    const arr = [\"A\", \"B\", \"C\", \"D\"];\r\n    arr[0] // \"A\"\r\n    arr.shift()\r\n    arr[0] // \"B\"\r\n    ```\r\n\r\n- 비어있는 배열의 경우를 제외하고 `push, pop`메소드는 `shift, unshift`보다 빠르다.\r\n- `push, pop`메소드의 경우`O(1)`이 걸린다.\r\n- `shift, unshift, concat, slice, splice`메소드의 경우 `O(n)`이 걸린다.\r\n- `sort`메소드의 경우 `O(n* log n)`이 걸린다. (추후 포스팅)\r\n- `forEach, map, filter, reduce`메소드의 경우 `O(n)`이 걸린다.\r\n\r\n\r\n---\r\n\r\n\r\n#### 피드백은 언제나 환영입니다.","path":"빅오로 보는 배열과 객체의 성능 평가"},{"data":{"title":"[Programming] 프레임워크와 라이브러리의 차이","date":"2022-09-20","tags":["TIL","Programming","Framework","Library"],"draft":false,"summary":"프레임워크와 라이브러리의 차이에 대해 알아보자","mainCategory":"tech","subCategory":"programming"},"content":"\r\n# 서론\r\n\r\n- 흔히 프로그래밍을 하는 사람이라면 한번 쯤 들어보고 생각해봤을 주제이다.\r\n- 이 부분에 대해 깊게 관심을 가지는 사람들도 있는 반면 자연스럽게 스쳐지나갔을 수도 있다.\r\n- 본인들이 사용하는 기술들의 사이트를 방문해보면 이게 라이브러리인지 프레임워크인지 명시가 되어있다.\r\n- 그렇다면 왜 각 기술들은 라이브러리? 프레임워크? 비슷해보이지만 다른 둘, 어떤 기준으로 정하는 것일까?\r\n- 바로 그러면 프레임워크와 라이브러리가 어떤 것인지 그리고 차이점은 뭔지 알아보자.\r\n\r\n&nbsp;\r\n\r\n> e.g. Frontend\r\n\r\n![좌측 상단부터 React, Vue,js, Next.js, Recoil](/assets/posts/til/Programming/framework&library/05.png)\r\n\r\n\r\n\r\n# 프레임워크(Framework)란?\r\n\r\n> 한줄 설명: 일정한 틀 안에서 틀이 정한 일정한 규칙에 따라 작성해야한다.\r\n\r\n- 프레임워크는 그들이 제공하는 규칙과 가이드라인이 있으며 사용자는 이에 맞게 코드를 작성해 나가야한다.\r\n- 규칙과 가이드라인을 벗어나서 코드를 작성하면 정상적으로 동작하지 않을 수 있다.\r\n\r\n&nbsp;\r\n\r\n# 라이브러리(Library)란?\r\n\r\n> 한줄 설명: 여러 기능들을 담은 말그대로 도서관! 내가 원하는 것만 골라 꺼내 쓸 수 있다.\r\n\r\n- 라이브러리의 제작자가 코드를 작성해 기능을 만들고 그것들을 모듈화 해놓은 것이다.\r\n- 해당 라이브러리에서 만들어놓은 컴포넌트나 메소드, 등을 내가 원하는 곳에서 내가 원할 때 그리고 내가 필요한 것들을 호출해 가져다 쓰기만 하면된다.\r\n- 본인이 따로 커스텀할 수 있는 옵션이 있다면 그것 또한 라이브러리에서 제공하는 기능이므로 내가 필요할 때 옵션을 넣기만하면 된다.\r\n- 기본적으로 호출해서 바로 쓸 수 있다.\r\n\r\n&nbsp;\r\n\r\n# 공통점\r\n\r\n- 재사용 가능하다.\r\n\r\n    - 라이브러리의 경우 어디서나 내가 원할 떄 호출이 가능하니 호출이 즉 재사용을 의미한다.\r\n    - 프레임워크의 경우 흐름에 맞춰 본인이 작성해놓은 코드를 원하는 곳에서 호출이 가능하다.\r\n\r\n&nbsp;\r\n\r\n# 차이점\r\n\r\n1. 사용의 주도권을 누가 쥐고 있느냐\r\n\r\n    - 프레임워크 : 프레임워크 자체가 쥐고 있으며 사용자는 프레임워크가 제시한 규칙에 따라 코드를 작성해야한다.\r\n    - 라이브러리 : 사용자가 쥐고 있으며, 사용자는 자신이 원하는 기능만 호출해 사용하면 된다.\r\n\r\n&nbsp;\r\n\r\n2. 프레임워크는 라이브러리를 포함한다.\r\n\r\n    - 프레임워크는 코드를 작성함에 있어서 필요한 라이브러리(기능)들을 제공해 줄 수 있다.\r\n\r\n![출처는 참고링크](/assets/posts/til/Programming/framework&library/06.png)\r\n\r\n&nbsp;\r\n\r\n3. 라이브러리도 정해진 규칙에 따라 호출해야하는 게 아닌가요?\r\n\r\n    - 필자가 생각하는 가장 큰 차이점은 호출 즉시 바로 사용할 수 있느냐 이다.\r\n\r\n    > e.g. 내가 A라는 기능을 원하는 경우\r\n\r\n    - 라이브러리의 경우 찾아서 A 기능을 쓰면 된다.\r\n    - 프레임워크의 경우 A 기능을 프레임워크에서 제공한 방식에 따라 직접 구현한다. A 기능을 제공한다면 그건 프레임워크의 라이브러리이다.\r\n    - 프레임워크에서 제공하는 기능들 때문에 이게 프레임워크인지 라이브러리인지 헷갈릴 수도 있다.\r\n\r\n\r\n&nbsp;\r\n\r\n4. 내가 지금 작성하고 있는 코드가 근간이 되는 언어에서 기반이 된건지 아니면 프레임워크나 라이브러리가 기반이 되는지 잘 보아야한다.\r\n\r\n    > e.g. React와 Vue.js에서 반복문을 쓰는 경우\r\n\r\n    - React\r\n\r\n    ```jsx\r\n    // React의 경우 반복문의 구현자체는 자바스크립트의 반복문을 사용하는 것이다.\r\n    // map이 아니더라도 for-in, for-of, for 다양하게 사용해서 구현 가능하다.\r\n    // map 사용\r\n    <div id=\"list-rendering\">\r\n      <ol>\r\n         {todos.map((todo)=> {\r\n             return (\r\n                 <li key={todo.id} >{todo.text}</li>\r\n             )\r\n         })}\r\n      </ol>\r\n    </div>\r\n    ```\r\n   &nbsp;\r\n\r\n    - Vue.js\r\n\r\n    ```vue\r\n    // 반드시 vue 에서 정한 규칙에 따라 반복문을 구현해야한다.\r\n    <div id=\"list-rendering\">\r\n      <ol>\r\n        <li v-for=\"todo in todos\">\r\n          {{ todo.text }}\r\n        </li>\r\n      </ol>\r\n    </div>\r\n    ```\r\n\r\n\r\n\r\n---\r\n\r\n\r\n### 참고\r\n- [What is the difference between a framework and a library?](https://stackoverflow.com/questions/148747/what-is-the-difference-between-a-framework-and-a-library)\r\n\r\n\r\n---\r\n\r\n\r\n#### 피드백은 언제나 환영입니다.","path":"[Programming] 프레임워크와 라이브러리의 차이"},{"data":{"title":"빅오 표기법 (Big O Notation)","date":"2022-09-18","tags":["TIL","Data Structure","빅오","Big O"],"draft":false,"summary":"빅오 표기법에 대해 알아보자","mainCategory":"tech","subCategory":"Data_Structure_&_Algorithms"},"content":"\r\n# 1. 빅오 (Big O) 소개\r\n\r\n- `효율성` 체크을 위해 알고리즘 성능을 측정하고 비교한다.\r\n- `input` 값의 증가에 따라 알고리즘의 실행 시간이 어떻게 변하는지에 대해 설명하는 공식적인 방법\r\n- `입력 값의 크기`와 `실행시간의 관계`를 나타낸다.\r\n- `전반적인 추세`에 주목한다.\r\n\r\n# 2. 코드 시간 재기\r\n\r\n- 더 나은 코드의 기준은 뭘까 ? => 속도? 가독성? 메모리 사용량?\r\n- 보통 시간에 집중을 한다. 시간이 중요하지만 단순 시간 측정은 기기의 성능에 차이가 난다.\r\n    그렇다고해서 똑같은 기기에서는 동일하냐? 그것도 아니다.\r\n    똑같은 기기에서도 시간 측정 기록은 차이가 있다.\r\n\r\n- 매번 새로운 방법이 나왔을 때 그것을 측정하는 것도 비용이다\r\n- 그래서 나온것이 빅오이다.\r\n\r\n# 3. 연산 갯수 세기\r\n\r\n- 코드가 실행될 때 걸리는 정확한 시간을 초로 측정하는 것보다는 → 컴퓨터가 처리해야하는 `연산의 갯수`를 세면된다.\r\n- 연산의 정확한 갯수를 세는 것보다는 `전체적인 추세`를 아는 것이 목적이다.\r\n- n값이 커질수록 연산의 갯수도 늘어나는 것은 당연하다. 이렇게 n값에 따른 변화 추이를 그래프로 그렸을 때 해당 알고리즘의 추세를 알 수 있다.\r\n\r\n![시간 복잡도 도식화 @50%](/assets/posts/til/DS&Al/빅오/01.png)\r\n\r\n# 6. 빅오 표현식의 단순화하기\r\n\r\n- 항상 같은 연산 = `O(1)` 실행 시간에 변함이 없다. n이 커져도 같다.\r\n- 선형 관계 (1:1) = `O(n)` n이 커지면 실행시간도 커진다.\r\n\r\n### 실행 시간\r\n1. 산수 = `O(1)`  (+ -  / *)\r\n2. 변수 할당 = `O(1)`\r\n3. 인덱스를 이용해 배열 엘리먼트에 접근 = `O(1)`\r\n4. 키를 통해 오브젝트 엘리먼트에 접근 = `O(1)`\r\n5. 루프 ⇒ 루프 길이에 따라\r\n\r\n```tsx\r\n// 무조건 반목문이 들어간다고 해서 최소 O(n)은 아니다.\r\n// 로직을 어떻게 짜느냐에 따라 다르다.\r\n// 예외\r\n\r\nfunction logAtMost5(n) {\r\n\tfor (let i = 1; i <= Math.min(5, n); i++) {\r\n\t\tconsole.log(i);\r\n\t}\r\n}\r\n\r\nlogAtMost5(1); // 1\r\nlogAtMost5(3); // 1 2 3\r\nlogAtMost5(5); // 1 2 3 4 5\r\nlogAtMost5(10); // 1 2 3 4 5\r\nlogAtMost5(100000); // 1 2 3 4 5\r\n\r\n// 추세를 보면 n값이 커져도 항상 5를 넘지 않는다\r\n// 5미만의 n 값들은 n값의 커짐에 따라 별로 영향을 주지 않는다\r\n// 그렇기에 빅오는 O(1)이다.\r\n```\r\n\r\n# 7. 공간 복잡도\r\n\r\n- 시간 복잡도 → 입력값(n)에 따른 알고리즘의 실행 속도\r\n- 입력값(n)이 커질수록 알고리즘이 얼마나 많은 공간을 차지하는지 고려한다. (메모리 사용량)\r\n- 입력되는 것을 제외하고 알고리즘 자체가 필요로 하는 공간\r\n\r\n1. 원시값들 `(boolean, numbers, undefined, null)`\r\n    - `상수 공간(constant space), O(1)`, 항상 똑같은 공간을 차지 = 불변 공간\r\n2. `String, Reference type, array, object` = `O(n) space`\r\n    - string → 문자의 길이\r\n    - array → 배열의 길이.\r\n    - object → 키의 갯수\r\n- 공간은 입력의 크기에 따른 리턴값 간의 관계\r\n\r\n\r\n#### 피드백은 언제나 환영입니다.","path":"빅오 표기법 (Big O Notation)"},{"data":{"title":"AWS Amplify Next.js 동적 경로(Dynamic Routes) 설정하기","date":"2022-09-17","tags":["TIL","AWS","Amplify","Next.js","Dynamic Routes","동적 경로"],"draft":false,"summary":"Amplify로 배포된 Next.js 프로젝트 동적 경로 설정하기","mainCategory":"platform","subCategory":"AWS"},"content":"\n# 서론\n\n- `static`하게 생성된 `html`파일들을 `Amplify`로 배포할 시에는 `url`에 맞는 `html`파일을 보여준다.\n- 하지만 `동적`으로 설정한 경로 같은 경우 이벤트 리스너로 `Link`이동 시에는 정상 작동하지만, 새로고침하거나 직접 주소창에 `url`을 치고 들어오면 `404 에러`를 반환한다.\n- 그 이유는`static`하게 생성된 `동적 경로`로 만들어진 `html` 파일을 보면 `[id].html` 이런 형식으로 만들어져 있기 때문에 실제 주소창에 적혀있는 `url`에 맞는 `html`파일을 찾지 못하기 때문이다.\n- `Next.js`의 `SSG`를 담당하는 함수를 호출해서 생성하면 각각에 `id`에 맞게 `html`파일을 전부 만들어준다면 `동적 경로`를 따로 설정할 필요가 없다.\n- 허나 실질적으로 `id`가 수백, 수천 개에 달하는 게시물 같은 경우 모든 `html` 파일들을 만들어주는 것은 비효율적이다.\n- 그렇다면 `동적 경로`로 만들어진 `html`파일의 경우 어떤식으로 설정을 하면 될까?\n\n# 사용법\n\n## 1. Amplify 콘솔로 진입 후 설정할 프로젝트로 이동\n- 이후 `다시 쓰기 및 리디렉션`을 클릭한다.\n\n![Amplify 프로젝트 좌측 메뉴](/assets/posts/til/AWS/AWS-Amplify-Next.js-동적-경로(Dynamic-Routes)-설정하기/01.png)\n\n## 2. `다시 쓰기 및 리디렉션` 페이지로 이동\n- 여기서는 라우팅에 관련해서 설정한 목록들을 확인할 수 있다.\n- 이후 `편집`을 누른다.\n\n![다시 쓰기 및 리디렉션 페이지](/assets/posts/til/AWS/AWS-Amplify-Next.js-동적-경로(Dynamic-Routes)-설정하기/02.png)\n\n\n## 3. `다시 쓰기 및 리디렉션` 설정\n- 여기서 오늘 할 `동적 경로`를 설정할 것이다.\n- 이외에도 `200`, `301`, `302`, `404`등 다양한 `status`에 대해 설정이 가능하다.\n\n![다시 쓰기 및 리디렉션 설정 페이지](/assets/posts/til/AWS/AWS-Amplify-Next.js-동적-경로(Dynamic-Routes)-설정하기/03.png)\n\n### 설정법\n\n- `static`하게 생성된 동적 경로로 이루어진 `html`파일 이름을 `대상 주소`에 그리고 파라미터 값의 이름을 그대로 가져다가 `<>`로 바꿔준뒤 `.html`을 제거해서 `소스 주소`에 넣는다.\n- 형식은 `200`으로 설정해준다.\n- `소스 주소`가 실제로 주소창에 표기되는 형식이다.\n> e.g. `/theme/<id>`의 `소스 주소`의 경우 주소창에 표기될 때는 `/theme/primary`, `/theme/secondary`이런 식으로 매칭이 된다.\n\n| 소스 주소 | 대상 주소 | 형식 |\n| ---- | ---- | ----------- |\n| /theme/<id> | /theme/[id].html | 200(다시 쓰기) |\n| /theme/<id>/main.html | /theme/[id]/main.html | 200(다시 쓰기) |\n| /post/<categoryId>/<postId> | /post/[categorId]/[postId].html | 200(다시 쓰기) |\n\n- 위와 같은 형식으로 `다시 쓰기 및 리디렉션` 페이지에서 설정해주면 `동적경로`로 이루어진 페이지로 매칭된다.\n- 이후 `저장`버튼을 누르고 반영 메세지를 확인한 뒤 새로고침이나 직접 주소창에 입력해서 들어가도 정상적으로 `url`에 맞는 `html`을 보여주는 것을 확인할 수 있다.\n\n***\n\n### 참조\n\n- [Using redirects - AWS Amplify Hosting](https://docs.aws.amazon.com/amplify/latest/userguide/redirects.html)\n- [Amplify HostingでのNext.jsのDynamic Routesの設定](https://zenn.dev/nus3/articles/e3da1bdb3ef302962f07)\n\n***\n\n#### 피드백은 언제나 환영입니다.","path":"AWS Amplify Next.js 동적 경로(Dynamic Routes) 설정하기"}]},"__N_SSG":true}