{"pageProps":{"categories":[{"title":"blockchain","sub":[{"title":"DApp","count":1},{"title":"solidity","count":4}]},{"title":"platform","sub":[{"title":"AWS","count":2},{"title":"Google Analytics 4","count":1}]},{"title":"tech","sub":[{"title":"CS","count":1},{"title":"CSS","count":2},{"title":"Data_Structure_&_Algorithms","count":6},{"title":"HTML","count":1},{"title":"javascript","count":4},{"title":"markdown","count":1},{"title":"Next.js","count":1},{"title":"programming","count":3},{"title":"react","count":2},{"title":"refactoring","count":3},{"title":"typescript","count":2}]}],"data":[{"data":{"title":"분할과 정복 패턴 (Divide and Conquer Pattern)","date":"2022-09-27","tags":["TIL","Udemy","Algorithm","분할과 정복 패턴","Divide and Conquer Pattern"],"draft":false,"summary":"여러 문제해결 패턴 중 분할과 정복 패턴에 대해 알아보자","mainCategory":"tech","subCategory":"Data_Structure_&_Algorithms"},"content":"\r\n&nbsp;\r\n\r\n# 1. 분할과 정복 패턴 (Divide and Conquer Pattern)\r\n\r\n- 주로 배열이나 문자열 같은 큰 규모의 데이터셋을 처리한다.\r\n- 이진 탐색이나 병합 정렬, 퀵 정렬 등에 사용되는 패턴이다.\r\n- 값을 찾기 위해 배열의 왼쪽에서 시작하여 오른쪽 끝까지 이동하는 것이 아닌 배열을 작은 조각으로 `세분`하여 각 조각들을 `어디로 이동`시킬지 결정하는 작업부터 시작한다.\r\n- 즉, 큰 데이터 덩어리를 작은 조각으로 나누는 거다.\r\n\r\n&nbsp;\r\n\r\n> e.g. 정수로 이루어진 정렬된 배열과 찾으려는 값이 주어지면 배열에서 해당 값이 있는 인덱스(위치)를 반환하는 search라는 함수를 작성해라. 값을 찾을 수 없으면 -1을 반환한다.\r\n\r\n## 일반적인 패턴\r\n- 시간 복잡도 : `O(n)`\r\n- 선형 탐색\r\n- `arr`가 주어진다면 최대 `arr`의 길이만큼 반복해야 한다.\r\n\r\n```js\r\nconst search = (arr, val) => {\r\n\tfor(let i = 0; i < arr.length; i++) {\r\n\t\tif(arr[i] === val) {\r\n\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\nsearch([1,2,3,4,5,6], 4) // 3\r\n```\r\n\r\n## 분할과 정복 패턴\r\n\r\n- 시간 복잡도 : `Log(n)`\r\n- 이진 탐색\r\n- 배열의 중간 값을 찾고나면 넘겨진 `val`이 속하는 배열을 골라 다시 중간 값을 찾고 `val`이 속한 배열을 골라서 `val`의 위치를 찾아낼 때까지 반복하는 작업\r\n\r\n```js\r\nconst search = (arr, val) => {\r\n  let min = 0;\r\n  let max = arr.length - 1;\r\n\r\n  while (min <= max) {\r\n\t\t// 배열의 중간 인덱스 (소수점 버림)\r\n    let middle = Math.floor((min + max) / 2);\r\n\r\n\t\t// 중간 인덱스의 값이 찾으려는 값보다 작으면\r\n\t\t// 찾으려는 값은 중간 인덱스의 값보다 큰 쪽에 속해 있다.\r\n\t\t// 증간 인덱스 보다 낮은 인덱스의 값들은 필요가 없으므로 min 값 갱신\r\n\t\t// e.g. 중간 인덱스의 값 = 3 / val = 4\r\n\t\t// 3이 4보다 작으니 3보다 작은 값들은 필요가 없다.\r\n    if (arr[middle] < val) {\r\n      min = middle + 1;\r\n    } else if (arr[middle] > val) {\r\n\t\t// 중간 인덱스의 값이 찾으려는 값보다 크면\r\n\t\t// 찾으려는 값은 중간 인덱스의 값보다 작은 쪽에 속해 있다.\r\n\t\t// 증간 인덱스 보다 큰 인덱스의 값들은 필요가 없으므로 max 값 갱신\r\n\t\t// e.g. 중간 인덱스의 값 = 7 / val = 4\r\n\t\t// 7이 4보다 크니 7보다 큰 값들은 필요가 없다.\r\n      max = middle - 1;\r\n    } else {\r\n        // 중간 인덱스의 값이 찾으려는 값과 같으면 바로 return\r\n        // e.g. 중간 인덱스의 값 = 4 / val = 4\r\n        // 중간 인덱스의 값이 찾으려는 값과 같으므로 위치 바로 return\r\n      return middle;\r\n    }\r\n  }\r\n  return -1;\r\n};\r\n\r\nsearch([1,2,3,4,5,6], 4) // 3\r\n```\r\n\r\n---\r\n\r\n#### 피드백은 언제나 환영입니다.","path":"분할과 정복 패턴 (Divide and Conquer Pattern)"},{"data":{"title":"슬라이딩 윈도우 패턴 (Sliding Window Pattern)","date":"2022-09-26","tags":["TIL","Udemy","Algorithm","슬라이딩 윈도우 패턴","Sliding Window Pattern"],"draft":false,"summary":"여러 문제해결 패턴 중 슬라이딩 윈도우 패턴에 대해 알아보자","mainCategory":"tech","subCategory":"Data_Structure_&_Algorithms"},"content":"\r\n&nbsp;\r\n\r\n# 1. 슬라이딩 윈도우 패턴 (Sliding Window Pattern)\r\n\r\n- 위치를 조정할 수 있는 특정 길이의 가상의 `window`을 하나 설정한 후, ` window`의 위치를 좌에서 우 또는 우에서 좌로 이동시키면서 특정 조건을 만족하는 값을 찾아내는 것이다.\r\n- `window`는 단일 변수, 하위 배열, 또는 필요한 경우 다른 문자열도 될 수 있다.\r\n- 배열/문자열 등의 데이터를 입력하거나 특정 방식으로 연속적인 해당 데이터의 하위 집합을 찾는 경우에 유용하다.\r\n\r\n&nbsp;\r\n\r\n> e.g. 배열과 숫자 하나를 전달 → 연속되는 n개의 숫자의 합계가 가장 큰 값을 구해라\r\n\r\n## 일반적인 패턴\r\n- 시간 복잡도 : `O(n^2)`\r\n- `for`문 을 이용한 이중 반복문\r\n\r\n```js\r\nconst max = (arr, n) => {\r\n    if (n > arr.length) return null;\r\n\r\n    // 배열이 만약 모두 음수로 구성되어 있다면 가장 큰합은 여전히 음수일 것이기 떄문이다.\r\n    // 전부 양수이지 않는한 0으로 설정하지 않는다.\r\n    let result = -Infinity;\r\n    for (let i = 0; i < arr.length - n + 1; i++){\r\n        temp = 0;\r\n        for (let j = 0; j < n; j++) {\r\n            temp += arr[i + j];\r\n        }\r\n        if(temp > result) {\r\n            result = temp;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n//            v  v\r\nmax([1, 2, 5, 2, 8, 1, 5], 2) // 10\r\n```\r\n\r\n## 빈도  카운터 패턴\r\n\r\n- 시간 복잡도 : `O(n)`\r\n\r\n```js\r\nconst max = (arr, n) => {\r\n    let max = 0;\r\n    let temp = 0;\r\n    if(arr.length < n) return null;\r\n\r\n    // 맨 처음 0번에서 시작하는 n개의 합을 구해서 max로 설정\r\n    // e.g. 1, 2 의 합인 3을 초기 값으로 세팅\r\n    // [v  v]\r\n    // [1, 2, 5, 2, 8, 1, 5]\r\n    for(let i = 0; i < n; i++) {\r\n        max += arr[i]\r\n    }\r\n    temp = max;\r\n        // 그 다음부터는 맨 처음 설정한 max값을 for문들 돌면서 n개의 값을 더하는 게 아닌 위치를 window의 첫 위치의 값을 빼고 window의 다음 위치에 있는 값을 더한다.\r\n        //  - [v  +]             ->    [v  v]\r\n        // [1, 2, 5, 2, 8, 1, 5] -> [1, 2, 5, 2, 8, 1, 5]\r\n        // 그래서 그 값을 임시로 저장하고 기존 amx값과 비교해서 최대값을 갱신해 나간다.\r\n        // for문의 n값부터 시작한다.\r\n    for(let i = n; i < arr.length; i++) {\r\n        // 2 - 2 = 0번쨰 인덱스의 값을 뺴고 / 2번째 인덱스의 값을 더한다.\r\n        //  0 [1  2]\r\n        // [1, 2, 5, 2, 8, 1, 5]\r\n        temp = temp - arr[i - n] + arr[i];\r\n        max = Math.max(max, temp)\r\n    }\r\n    return max\r\n}\r\n\r\n//           [v  v]\r\nmax([1, 2, 5, 2, 8, 1, 5], 2) // 10\r\n```\r\n\r\n---\r\n\r\n#### 피드백은 언제나 환영입니다.","path":"슬라이딩 윈도우 패턴 (Sliding Window Pattern)"},{"data":{"title":"다중 포인터 패턴 (Multiple Pointers Pattern)","date":"2022-09-24","tags":["TIL","Udemy","Algorithm","다중 포인터 패턴","Multiple Pointers Pattern"],"draft":false,"summary":"여러 문제해결 패턴 중 다중 포인터 패턴에 대해 알아보자","mainCategory":"tech","subCategory":"Data_Structure_&_Algorithms"},"content":"\r\n&nbsp;\r\n\r\n# 1. 다중 포인터 패턴 (Multiple Pointers Pattern)\r\n\r\n- 인덱스나 위치에 해당하는 `포인터나 값`을 만든 다음 특정 조건에 따라 중간 지점에서부터 `시작 지점`이나 `끝 지점`이나 `양쪽 지점`을 향해 이동시킨다.\r\n- 두 개의 포인터를 지정하고 포인터의 위치를 변경하면서 `특정 조건에 맞는 쌍 or 값`을 찾는 것\r\n\r\n&nbsp;\r\n\r\n> e.g. 정렬된 배열을 취하는 `sumZero` 라는 함수 작성.\r\n오름차순으로 정렬되어 있어야 한다.\r\n처음으로 합해서 0이 되는 쌍을  찾으면 된다.\r\n\r\n\r\n## 일반적인 패턴\r\n- 시간 복잡도 : `O(n^2)`\r\n- 공간 복잡도 : `O(1)`\r\n- `for문`이중 반복문을 사용한다.\r\n\r\n```js\r\nconst sumZero = (arr) => {\r\n    for(const i in arr) {\r\n        for (const j in arr) {\r\n        // 합이 0이면 해당 값들 리턴\r\n        // 나올 때까지 돈다... 돌다가 나오면 리턴 아니면 끝까지 쭉 하고 undefined\r\n         if(arr[i] + arr[j] === 0) {\r\n             return [arr[i], arr[j]]\r\n         }\r\n        }\r\n    }\r\n};\r\nsumZero([-4, -3, -2, -1, 0 , 1, 2, 5]) // [-2, 2]\r\n```\r\n\r\n## 빈도  카운터 패턴\r\n\r\n- 시간 복잡도 : `O(n)`\r\n- 공간 복잡도 : `O(1)`\r\n- 양 끝에 인덱스를 포인터로 지정하고 합이 0에 맞는 값을 찾아나가는 과정이다.\r\n- 합이 0이 안된다면 좌, 우의 포인터를 한 칸씩 번갈아서 가운데 방향을 이동시키면서 합이 0이되는 인덱스의 값을 찾아낸다.\r\n\r\n```js\r\nconst sumZero = (arr) => {\r\n    let left = 0; // 배열의 첫번째 인덱스 지정\r\n    let right = arr.length - 1; // 배열의 끝 지점에 인덱스 지정\r\n\r\n    while(left < right) {\r\n      const sumNumber = arr[left] + arr[right];\r\n        // 합이 0이면 해당 값들 리턴\r\n        if(sumNumber === 0) {\r\n            return [arr[left], arr[right]]\r\n        // 합이 0보다 크면 우측 포지션 -1\r\n        } else if (arr[left] + arr[right] > 0) {\r\n            right--;\r\n        //합이 0보다 작거나 같으면 좌측 포지션 + 1\r\n        } else {\r\n            left++;\r\n        }\r\n    }\r\n};\r\n\r\nsumZero([-4, -3, -2, -1, 0 , 1, 2, 5])\r\n```\r\n\r\n---\r\n\r\n#### 피드백은 언제나 환영입니다.","path":"다중 포인터 패턴 (Multiple Pointers Pattern)"},{"data":{"title":"빈도수 카운터 패턴 (Frequency Counters Pattern)","date":"2022-09-24","tags":["TIL","Udemy","Algorithm","빈도수 카운터 패턴","Frequency Counters Pattern"],"draft":false,"summary":"여러 문제해결 패턴 중 빈도수 카운터 패턴에 대해 알아보자","mainCategory":"tech","subCategory":"Data_Structure_&_Algorithms"},"content":"\r\n# 1. 빈도수 카운터 패턴 (Frequency Counters Pattern)\r\n\r\n- 자바스크립트의 객체를 이용해서 값과 빈도수를 체크한다.\r\n- 두 개의 배열을 객체로 세분화하고 각 배열의 요소들을 분류하고 비교한다.\r\n\r\n&nbsp;\r\n\r\n> e.g. 2개의 배열을 이용하는 same 함수가 있다. 두번째 배열의 값들은 첫번쨰 배열의 값들의 제곱이다. 각 값들의 빈도 수가 같아야한다.\r\n\r\n\r\n## 일반적인 패턴 `O(n^2)`\r\n\r\n- `for문`과 `indexOf`메소드를 이용한 이중 반복문\r\n\r\n```js\r\nconst same = (first, second) => {\r\n    // 두 배열의 길이가 다르면 false\r\n    if (first.length !== second.length) return false;\r\n    for (const i in first) {\r\n        // 두번째 배열에 매칭되는 인덱스 찾기\r\n        const correct = second.indexOf(first[i] ** 2);\r\n        // 없으면 false\r\n        if (correct === -1) return false;\r\n        // 있으면 체크 후 제거\r\n        second.splice(correct, 1);\r\n    }\r\n    return true;\r\n  };\r\n\r\nsame([1, 2, 3, 2], [4, 1, 9, 4])\r\n```\r\n\r\n## 빈도  카운터 패턴 `O(n)`\r\n\r\n- 이중 반복문을 돌리는 대신 각 배열을 한번씩만 반복문 적용\r\n- 이중 반복문보다 빠르다.\r\n- 두 객체를 사용해서 각 배열 `value`의 빈도수를 체크 (`value`가 각 배열에서 몇 번 나왔는지 알 수 있다.)\r\n- 만둘어진 객체의 `key`를 체크하는 반복문을 작성해서 하나의 객체에만 적용시켜주면 된다. (여기서는 `frequencyCounter1`)\r\n```js\r\nconst same = (first, second) => {\r\n    if (first.length !== second.length) return false;\r\n    let frequencyCounter1 = {}; // {1: 1, 2: 2, 3: 1}\r\n    let frequencyCounter2 = {}; // {1: 1, 4: 2, 9: 1}\r\n    for (const val of first) {\r\n        // 없으면 1로, 있으면 1씩 더함\r\n        frequencyCounter1[val] = (frequencyCounter1[val] || 0) + 1;\r\n    }\r\n    for (const val of second) {\r\n        // 없으면 1로, 있으면 1씩 더함\r\n        frequencyCounter2[val] = (frequencyCounter2[val] || 0) + 1;\r\n    }\r\n    for (const key in frequencyCounter1) {\r\n        // 매칭되는 key가 있는지 체크\r\n        if (!(key ** 2 in frequencyCounter2)) {\r\n            return false;\r\n        }\r\n        // 해당 key를 이용해서 매칭되는 value의 빈도수가 같은지 체크\r\n        if (frequencyCounter2[key ** 2] !== frequencyCounter1[key]) {\r\n            return false;\r\n        }\r\n    }\r\n    // 모든 조건 통과시 true\r\n    return true;\r\n  };\r\n\r\nsame([1, 2, 3, 2], [4, 1, 9, 4])\r\n```\r\n\r\n---\r\n\r\n#### 피드백은 언제나 환영입니다.","path":"빈도수 카운터 패턴 (Frequency Counters Pattern)"},{"data":{"title":"빅오로 보는 배열과 객체의 성능 평가","date":"2022-09-22","tags":["TIL","Udemy","Data Structure","빅오","Big O","Object","Array"],"draft":false,"summary":"배열과 객체 그리고 내장된 메소드들의 성능은?","mainCategory":"tech","subCategory":"Data_Structure_&_Algorithms"},"content":"\r\n# 1. 객체(Object)의 빅오(Big O)\r\n\r\n- 객체는 정렬되어 있지 않다.\r\n- 저장, 접근, 제거, 수정의 경우 `O(1)`이 걸린다.\r\n- 탐색은 단순하게 `key`에 접근하는 것이 아닌 `value`를 가져와야하기에 `O(n)`이 걸린다.\r\n\r\n    ```js\r\n     const obj = { name: \"jack\", age: 0 };\r\n    // 'jack' 이라는 값이 어디에 저장되어 있는가를 알기위해서는 모든 `key`값을 돌며 `value`를 체크해야한다.\r\n    ```\r\n\r\n- `Object.keys, Object.values, Object.entries` 메소드들의 경우 `O(n)`이 걸린다.\r\n    - 객체를 돌며 다 배열에 담아 반환해야하기 떄문이다.\r\n- `hasOwnProperty`의 경우 `O(1)`이 걸린다.\r\n    - `key`가 있는지 없는지 바로 접근이 가능하기 때문이다.\r\n\r\n&nbsp;\r\n\r\n# 2. 배열(Array)의 빅오(Big O)\r\n\r\n- 배열은 정렬된 데이터이다. 그렇기에 각 값에 인덱스가 붙어있다.\r\n\r\n- 접근의 경우 `O(1)`이 걸린다.\r\n    - `index`로 바로 접근하면 되기 때문이다.\r\n\r\n- 탐색은 객체와 동일하게 `O(n)`이 걸린다.\r\n\r\n- 저장의 경우 어디에 저장하느냐에 따라 빅오가 달라진다.\r\n    - `push`메소드는 배열의 끝에 저장하기 때문에 `O(1)`이 걸린다.\r\n    - `unshift`메소드는 배열의 처음에 저장하기 때문에 `O(n)`이 걸린다.\r\n\r\n- 제거의 경우도 어디를 제거하느냐에 따라 빅오가 달라진다.\r\n  - `pop` 메소드는 배열의 끝값을 제거하기 때문에 `O(1)`이 걸린다.\r\n  - `shift`메소드는 배열의 처음값을 제거하기 때문에 `O(n)`이 걸린다.\r\n\r\n&nbsp;\r\n\r\n## 왜? 같은 저장, 제거인데 다르죠?\r\n\r\n- 인덱스 번호의 재배치 때문이다.\r\n- 배열의 끝에 `저장/제거`하는 경우는 끝에 값이 있기 때문에 다른 값들의 인덱스는 변화가 없다.\r\n- 하지만 배열의 처음에 `저장/제거`하는 경우는 그 작업을 수행한 후 나머지 값들의 인덱스를 재배치 해주어야하기 때문이다.\r\n\r\n    ```js\r\n    // 기존의 0번 인덱스에 위치한 값은 \"A\"이지만 shift 호출이후 \"B\"로 바뀌게 된다.\r\n    // 즉, 0번 인덱스의 값이 제거가 되면 나머지 값들의 인덱스 번호가 하나씩 떙겨져 재배치 된다.\r\n    const arr = [\"A\", \"B\", \"C\", \"D\"];\r\n    arr[0] // \"A\"\r\n    arr.shift()\r\n    arr[0] // \"B\"\r\n    ```\r\n\r\n- 비어있는 배열의 경우를 제외하고 `push, pop`메소드는 `shift, unshift`보다 빠르다.\r\n- `push, pop`메소드의 경우`O(1)`이 걸린다.\r\n- `shift, unshift, concat, slice, splice`메소드의 경우 `O(n)`이 걸린다.\r\n- `sort`메소드의 경우 `O(n* log n)`이 걸린다. (추후 포스팅)\r\n- `forEach, map, filter, reduce`메소드의 경우 `O(n)`이 걸린다.\r\n\r\n\r\n---\r\n\r\n\r\n#### 피드백은 언제나 환영입니다.","path":"빅오로 보는 배열과 객체의 성능 평가"},{"data":{"title":"빅오 표기법 (Big O Notation)","date":"2022-09-18","tags":["TIL","Data Structure","빅오","Big O"],"draft":false,"summary":"빅오 표기법에 대해 알아보자","mainCategory":"tech","subCategory":"Data_Structure_&_Algorithms"},"content":"\r\n# 1. 빅오 (Big O) 소개\r\n\r\n- `효율성` 체크을 위해 알고리즘 성능을 측정하고 비교한다.\r\n- `input` 값의 증가에 따라 알고리즘의 실행 시간이 어떻게 변하는지에 대해 설명하는 공식적인 방법\r\n- `입력 값의 크기`와 `실행시간의 관계`를 나타낸다.\r\n- `전반적인 추세`에 주목한다.\r\n\r\n# 2. 코드 시간 재기\r\n\r\n- 더 나은 코드의 기준은 뭘까 ? => 속도? 가독성? 메모리 사용량?\r\n- 보통 시간에 집중을 한다. 시간이 중요하지만 단순 시간 측정은 기기의 성능에 차이가 난다.\r\n    그렇다고해서 똑같은 기기에서는 동일하냐? 그것도 아니다.\r\n    똑같은 기기에서도 시간 측정 기록은 차이가 있다.\r\n\r\n- 매번 새로운 방법이 나왔을 때 그것을 측정하는 것도 비용이다\r\n- 그래서 나온것이 빅오이다.\r\n\r\n# 3. 연산 갯수 세기\r\n\r\n- 코드가 실행될 때 걸리는 정확한 시간을 초로 측정하는 것보다는 → 컴퓨터가 처리해야하는 `연산의 갯수`를 세면된다.\r\n- 연산의 정확한 갯수를 세는 것보다는 `전체적인 추세`를 아는 것이 목적이다.\r\n- n값이 커질수록 연산의 갯수도 늘어나는 것은 당연하다. 이렇게 n값에 따른 변화 추이를 그래프로 그렸을 때 해당 알고리즘의 추세를 알 수 있다.\r\n\r\n![시간 복잡도 도식화 @50%](/assets/posts/til/DS&Al/빅오/01.png)\r\n\r\n# 6. 빅오 표현식의 단순화하기\r\n\r\n- 항상 같은 연산 = `O(1)` 실행 시간에 변함이 없다. n이 커져도 같다.\r\n- 선형 관계 (1:1) = `O(n)` n이 커지면 실행시간도 커진다.\r\n\r\n### 실행 시간\r\n1. 산수 = `O(1)`  (+ -  / *)\r\n2. 변수 할당 = `O(1)`\r\n3. 인덱스를 이용해 배열 엘리먼트에 접근 = `O(1)`\r\n4. 키를 통해 오브젝트 엘리먼트에 접근 = `O(1)`\r\n5. 루프 ⇒ 루프 길이에 따라\r\n\r\n```tsx\r\n// 무조건 반목문이 들어간다고 해서 최소 O(n)은 아니다.\r\n// 로직을 어떻게 짜느냐에 따라 다르다.\r\n// 예외\r\n\r\nfunction logAtMost5(n) {\r\n\tfor (let i = 1; i <= Math.min(5, n); i++) {\r\n\t\tconsole.log(i);\r\n\t}\r\n}\r\n\r\nlogAtMost5(1); // 1\r\nlogAtMost5(3); // 1 2 3\r\nlogAtMost5(5); // 1 2 3 4 5\r\nlogAtMost5(10); // 1 2 3 4 5\r\nlogAtMost5(100000); // 1 2 3 4 5\r\n\r\n// 추세를 보면 n값이 커져도 항상 5를 넘지 않는다\r\n// 5미만의 n 값들은 n값의 커짐에 따라 별로 영향을 주지 않는다\r\n// 그렇기에 빅오는 O(1)이다.\r\n```\r\n\r\n# 7. 공간 복잡도\r\n\r\n- 시간 복잡도 → 입력값(n)에 따른 알고리즘의 실행 속도\r\n- 입력값(n)이 커질수록 알고리즘이 얼마나 많은 공간을 차지하는지 고려한다. (메모리 사용량)\r\n- 입력되는 것을 제외하고 알고리즘 자체가 필요로 하는 공간\r\n\r\n1. 원시값들 `(boolean, numbers, undefined, null)`\r\n    - `상수 공간(constant space), O(1)`, 항상 똑같은 공간을 차지 = 불변 공간\r\n2. `String, Reference type, array, object` = `O(n) space`\r\n    - string → 문자의 길이\r\n    - array → 배열의 길이.\r\n    - object → 키의 갯수\r\n- 공간은 입력의 크기에 따른 리턴값 간의 관계\r\n\r\n\r\n#### 피드백은 언제나 환영입니다.","path":"빅오 표기법 (Big O Notation)"}]},"__N_SSG":true}