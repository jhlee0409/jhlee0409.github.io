{"pageProps":{"categories":[{"title":"blockchain","sub":[{"title":"DApp","count":1},{"title":"solidity","count":4}]},{"title":"platform","sub":[{"title":"AWS","count":2},{"title":"Google Analytics 4","count":1}]},{"title":"tech","sub":[{"title":"CS","count":1},{"title":"CSS","count":2},{"title":"Data_Structure_&_Algorithms","count":15},{"title":"HTML","count":1},{"title":"javascript","count":4},{"title":"markdown","count":1},{"title":"Next.js","count":1},{"title":"programming","count":3},{"title":"react","count":2},{"title":"refactoring","count":3},{"title":"typescript","count":2}]}],"data":{"title":"정렬 알고리즘 (Sort Algorithm)","date":"2022-10-12","tags":["TIL","Udemy","Algorithm","정렬 알고리즘","Sort Algorithm"],"draft":false,"summary":"정렬 알고리즘과 JS의 배열 내장 메소드인 sort에 대해 알아보자"},"content":"\n&nbsp;\n\n# 정렬이란?\n\n- 정렬은 간단히 배열과 같은 컬렉션(collection)의 항목을 재배열하는 과정을 말한다.\n- 배열, 목록, 트리와 같은 다른 데이터 구조도 정렬 가능하다.\n\n    > e.g. 숫자를 오름차순, 내림차순으로 정렬하기\n    >\n\n    > e.g. 문자를 알파벳순, ㄱㄴㄷ순으로 정렬하기\n    >\n\n    > e.g. 개봉 연도 또는 수익 … 을 기준으로 영화 정렬하기\n    >\n\n- [접근 방식에 따른 정렬 알고리즘 YOUTUBE 영상](https://youtu.be/kPRA0W1kECg)\n\n&nbsp;\n\n# 왜 정렬을 배우는 게 필요한가?\n\n- 정렬은 프로그래밍을 함에 있어서 흔히 접하기 때문에 동작 방식을 아는 게 좋다.\n    - 각 언어의 내장된 정렬 메소드를 쓸 때 동작 방식을 알아야 어느 상황 때 어느 메소드를 쓰는 게 좋은지 판단이 가능하다.\n- 다양한 방식의 정렬이 있고 각각 장단점이 있다.\n- 객관적으로 빠른 정렬이 있는 반면, 특정 상황에서 뛰어난 성능을 보여주는 정렬도 있다.\n- [Sorting Algorithms Animations](https://www.toptal.com/developers/sorting-algorithms)에서 어느 상황 때 어느 정렬 알고리즘이 좋은지 시각적 잘 보여준다.\n\n&nbsp;\n\n# Javascript의 배열 내장 메소드인 Array.sort()\n\n- `sort`메소드는 의도한 상황대로 정상적으로 작동하지 않을 때가 있다.\n- 기본적인 `sort`의 동작 방식은 숫자의 순서를 이해하지 못한다.\n- 왜 이해하지 못할까? [MDN Array.prototype.sort()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)를 보면 다음과 같은 이유 때문이다.\n    > 기본 정렬 순서는 문자열의 유니코드 코드 포인트를 따릅니다.\n- 그렇기에 숫자를 의도한 대로 정렬하기 위해서는 추가적인 로직 작성이 필요하다.\n\n```jsx\n// 추가 로직 작성 전\n\n// 오름차순으로 정렬하고자 할 때\n[2, 12, 5, 10].sort(); \n\n// 원하는 결과\n[2, 5, 10, 12]\n\n// 실제 결과\n[10, 12, 2, 5]\n```\n\n&nbsp;\n\n## 추가적인 작업\n\n- `sort()`는 인자로 `선택적 비교 함수(optional comparator function)`를 받을 수 있다.\n- `선택적 비교 함수`를 통해 우리가 원하는 정렬 방식을 전달할 수 있다.\n- `선택적 비교 함수`는 `A와 B`를 비교하고 반환되는 값을 기반으로 정렬한다.\n    - 만약 `음수`를 반환하면 `A는 B보다 앞에 정렬`된다.\n    - 만약 `양수`를 반환하면 `A는 B보다 뒤에 정렬`된다.\n    - 만약 `0`을 반환하면 `A와B는 같은 값이기 때문에 변화는 없다.`\n\n```jsx\n// 오름차순으로 정렬하고자 할 때\n[2, 12, 5, 10].sort((a,b) => {\n\treturn a - b;\n});\n\n// 음수 이기에 2는 12 앞에 정렬\n[2, 12] => 2 - 12 = -10  // [2, 12]\n\n// 양수 이기에 12는 5 뒤에 정렬\n[12, 5] => 12 - 5 = 7  // [2, 5, 12]\n\n// 양수 이기에 12는 10 뒤에 정렬\n[12, 10] => 12 - 10 = 2 // [2, 5, 10, 12]\n\n\n// result\n[2, 5, 10, 12]\n\n```\n\n&nbsp;\n\n- 문자열의 경우에도 어떤 비교함수를 작성하느냐에 따라 정렬 방식을 다양하게 할 수 있다\n\n> e.g. 문자의 길이를 기준으로 정렬하는 경우\n\n```jsx\n[\"Apple\", \"Pear\", \"Strawberry\", \"Cheery\"].sort((a,b)=> {\n\t// 반환되는 값은 0, 음수, 양수\n\treturn a.length - b.length; \n})\n\n// 양수 이기에 Apple은 Pear 뒤에 정렬\n['Apple', 'Pear'] => 5 - 4 = 1 // ['Pear', 'Apple']\n\n// 음수 이기에 Apple은 Strawberry 앞에 정렬\n['Apple', 'Strawberry'] => 5 - 10 = -4  // ['Pear', 'Apple', 'Strawberry']\n\n//양수 이기에 Strawberry는 Cherry 뒤에 정렬\n[\"Strawberry\", \"Cheery\"] => 10 - 6 = 4 // ['Pear', 'Apple', 'Cheery', 'Strawberry']\n\n\n// result\n['Pear', 'Apple', 'Cheery', 'Strawberry']\n```\n\n---\n\n\n#### 피드백은 언제나 환영입니다."},"__N_SSG":true}