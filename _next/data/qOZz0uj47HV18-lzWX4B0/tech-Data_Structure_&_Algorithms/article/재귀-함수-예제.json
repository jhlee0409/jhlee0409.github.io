{"pageProps":{"categories":[{"title":"blockchain","sub":[{"title":"DApp","count":1},{"title":"solidity","count":4}]},{"title":"platform","sub":[{"title":"AWS","count":2},{"title":"Google Analytics 4","count":1}]},{"title":"tech","sub":[{"title":"CS","count":1},{"title":"CSS","count":2},{"title":"Data_Structure_&_Algorithms","count":13},{"title":"HTML","count":1},{"title":"javascript","count":4},{"title":"markdown","count":1},{"title":"Next.js","count":1},{"title":"programming","count":3},{"title":"react","count":2},{"title":"refactoring","count":3},{"title":"typescript","count":2}]}],"data":{"title":"재귀 함수 예제","date":"2022-09-29","tags":["TIL","Udemy","Algorithm","재귀 함수 예제","Recursive Function","Recursion"],"draft":false,"summary":"재귀 함수 예제 2가지를 살펴보자"},"content":"\r\n&nbsp;\r\n\r\n# 재귀 함수\r\n\r\n- 기본적인 개념은 동일한 함수를 계속 호출하면서, 하나의 함수가 자기 자신을 재귀적으로 호출하게 하는 것이다\r\n- 어떤 재귀 함수든 반드시 갖춰야 하는 두 가지 요소가 있다.\r\n  1. `종료 조건`(재귀가 멈추는 시점)이 있어야 한다.\r\n  2. `다른 입력값`을 받아야한다. (재귀 함수를 호출할 때 매번 다른 데이터가 들어와야한다.)\r\n\r\n# 첫번째 재귀 함수\r\n\r\n- `countDown(0)` => 종료 조건 `if문`에서 걸려 종료된다\r\n- 종료 조건에서 `return` 하지않으면 콘솔만 찍히고 계속 진행된다.\r\n    - `return`을 꼭하거나 `else문`을 써서 종료시켜야한다.\r\n```jsx\r\n  const countDown = (num) => {\r\n    if (num <= 0) { // 종료 조건\r\n      console.log(\"All done!\");\r\n      // return 하지않으면 콘솔만 찍히고 재귀 함수는 계속 진행된다.\r\n      return;\r\n      // 아니면 else 문을 써야한다.\r\n    }\r\n    console.log(num);\r\n    num--;\r\n    countDown(num);\r\n  };\r\n\r\ncountDown(10)  // 10 -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3 -> 1 -> All done!\r\n```\r\n\r\n# 두번째 재귀 함수\r\n\r\n- 첫번째 재귀 함수와 다른 점은 재귀 함수가 계속해서 `return` 한다는 것이다\r\n- 여기서 이전 포스팅 내용인 `콜 스택`의 개념을 알면 이해하기 쉽다\r\n    1. `sumRange(3)`함수를 가정 먼저 호출하게 되면 1층에 쌓인다.\r\n    2. `sumRange(3)`함수 내의 `sumRange(2)`함수를 호출하게 되고 `sumRange(3)`은 `return`한게 없기 때문에 1층에 그대로 있고 위에 얹혀서 2층에 쌓인다.\r\n    3. `sumRange(2)`함수 내의 `sumRange(1)`함수를 호출하게 되고 `sumRange(2)`은 `return`한게 없기 때문에 2층에 그대로 있고 위에 얹혀서 3층에 쌓인다.\r\n    4. `sumRange(1)`함수 호출 시 `if문(종료 조건)`에 걸려 `1`을 반환하고 콜 스택에서 제거된다.\r\n    5. `sumRange(2)`함수는 `sumRange(1)`에서 반환된 값 `1`과 `num`값인 `2`를 더한 값인 `3 (= 2 + sumRange(1))`을 반환하고 콜 스택에서 제거된다.\r\n    6. `sumRange(3)`함수는 `sumRange(2)`에서 반환된 값 `3`과 `num`값인 `3`를 더한 값인 `6 (= 3 + sumRange(2))`을 반환하고 콜 스택에서 제거된다.\r\n    7. 결과적으로 `6`을 반환한다.\r\n\r\n```jsx\r\n  const sumRange = (num) => {\r\n    if (num === 1) return 1; // 종료 조건\r\n    return num + sumRange(num - 1);\r\n  };\r\n\r\n// 콜 스택 과정\r\nsumRange(3) // 6\r\n    return 3 + sumRange(2) // 3 + 3\r\n                    return 2 + sumRange(1) // 2 + 1\r\n                                    return 1\r\n```\r\n---\r\n\r\n#### 피드백은 언제나 환영입니다."},"__N_SSG":true}