{"pageProps":{"categories":[{"title":"blockchain","sub":[{"title":"DApp","count":1},{"title":"solidity","count":4}]},{"title":"platform","sub":[{"title":"AWS","count":2},{"title":"Google Analytics 4","count":1}]},{"title":"tech","sub":[{"title":"CS","count":1},{"title":"CSS","count":2},{"title":"Data_Structure_&_Algorithms","count":7},{"title":"HTML","count":1},{"title":"javascript","count":4},{"title":"markdown","count":1},{"title":"Next.js","count":1},{"title":"programming","count":3},{"title":"react","count":2},{"title":"refactoring","count":3},{"title":"typescript","count":2}]}],"data":[{"data":{"title":"AbortController 파헤치기","date":"2022-09-09","tags":["TIL","Javascript","AbortController","signal","abort()"],"draft":false,"summary":"AbortController 통해 API 요청을 취소해보자","mainCategory":"tech","subCategory":"javascript"},"content":"\r\n# AbortController란?\r\n\r\n- 하나 이상의 웹 요청을 취소할 수 있게 해준다.\r\n- `new` 키워드를 이용해 `AbortController` 객체 인스턴스를 생성한다.\r\n\r\n\r\n# AbortController 구성요소\r\n\r\n- `AbortController.signal` : DOM 요청과 통신하기 위한 객체\r\n- `AbortController.abort()`: DOM 요청이 완료되기 전에 취소한다.\r\n    - 호출시 `catch`문으로 바로 넘어간다\r\n    - `abort()` 통해 취소하면 `network status`에 상태코드가 아닌 `canceled`라고 뜬다.\r\n    - 이벤트리스너를 통해서 `abort()` 호출 가능\r\n## `abort()` 호출 시점에 따른 차이\r\n\r\n1. API 요청 전\r\n    - occur error : `AbortError: Failed to execute 'fetch' on 'Window': The user aborted a request`.\r\n2. API 요청 성공 시점\r\n    - `abort()` 메소드 무시하고 정상 진행\r\n3. API 요청 끝난 후\r\n    - occur error : `AbortError: The user aborted a request.`\r\n4. `finally()` 메소드 호출 시점\r\n    - `abort()` 메소드 무시하고 정상 진행\r\n\r\n# 사용법\r\n- API 호출 시 `option`에 `signal`객체 추가\r\n- API 요청 끝난 후 `abort()` 호출\r\n\r\n## fetch 사용시\r\n```javascript\r\nconst controller = new AbortController();\r\n\r\nfetch('/foo/bar', {\r\n    signal: controller.signal\r\n })\r\n  .then((res) => res.json())\r\n  .then((data) => {\r\n    console.log(data);\r\n  })\r\n  .catch((err) => console.log(\"err: \" + err))\r\n    // log => \"err: AbortError: The user aborted a request.\"\r\n\r\n// 요청 취소\r\ncontroller.abort();\r\n```\r\n\r\n## axios 사용시\r\n```javascript\r\nconst controller = new AbortController();\r\n\r\naxios.get('/foo/bar', {\r\n   signal: controller.signal\r\n}).then((res) => {\r\n   //...\r\n})\r\n.catch((err) => console.log(\"err: \" + err));\r\n    // log => \"err: AbortError: The user aborted a request.\"\r\n\r\n// 요청 취소\r\ncontroller.abort()\r\n```\r\n\r\n#\r\n### 참조\r\n\r\n- [AbortController](https://developer.mozilla.org/ko/docs/Web/API/AbortController)\r\n- [Cancellation | Axios Docs](https://axios-http.com/docs/cancellation)\r\n#\r\n\r\n#### 피드백은 언제나 환영입니다.","path":"AbortController 파헤치기"},{"data":{"title":"단항 더하기 연산자 (Unary + Operator)","date":"2022-09-04","tags":["TIL","Javascript","단항 더하기 (Unary + Operator)","단항 부정 연산자 (Unary - Operator)"],"draft":false,"summary":"단항 더하기 (Unary + Operator)와 단항 부정 연산자 (Unary - Operator)에 대해 알아보자","mainCategory":"tech","subCategory":"javascript"},"content":"# 단항 더하기 연산자 (Unary + Operator)\r\n- `단항 더하기 연산자 (Unary + Operator)`는 피연산자를 숫자 유형으로 변환합니다.\r\n- 피연산자에 어떠한 영향도 주지 않으며 음수를 양수로 만들지도 않는다.\r\n- 숫자 타입이 아닌 피연산자에게는 피연산자를 숫자 타입으로 변환하여 반환한다.\r\n- 이 때는 피연산자를 변경하는 것이 아닌 숫자 타입으로 변환한 값을 생성해서 반환한다.\r\n\r\n```javascript\r\n    console.log(+\"10\"); // 10\r\n\r\n    console.log(+\"\"); // 0\r\n\r\n    console.log(+\"Le Jack\"); // NaN (Not a Number)\r\n\r\n    console.log(+undefined); // NaN (Not a Number)\r\n\r\n    console.log(+true); // 1\r\n\r\n    console.log(+false); // 0\r\n\r\n    console.log(+null); // 0\r\n\r\n    console.log(+1n); // Uncaught TypeError: BigInt를 숫자로 변환할 수 없다.\r\n```\r\n\r\n# 단항 부정 연산자 (Unary - Operator)\r\n- `단항 부정 연산자 (Unary - Operator)`는 피연산자의 부호를 반전한 값을 반환한다.\r\n- 나머지 특성은 `단항 더하기 연산자`와 같다.\r\n\r\n```javascript\r\n    console.log(-\"10\"); // -10\r\n\r\n    console.log(-\"\"); // -0\r\n\r\n    console.log(-\"Le Jack\"); // NaN (Not a Number)\r\n\r\n    console.log(-undefined); // NaN (Not a Number)\r\n\r\n    console.log(-true); // -1\r\n\r\n    console.log(-false); // -0\r\n\r\n    console.log(-null); // -0\r\n\r\n    console.log(-1n); // Uncaught TypeError: BigInt를 숫자로 변환할 수 없다.\r\n```\r\n\r\n#\r\n\r\n#### 피드백은 언제나 환영입니다.","path":"단항 더하기 연산자 (Unary + Operator)"},{"data":{"title":"export 파헤치기","date":"2022-08-17","tags":["TIL","Javascript"],"draft":false,"summary":"export","mainCategory":"tech","subCategory":"javascript"},"content":"# export 파헤치기\r\n\r\n- 지난 포스팅에 이어서 오늘은 `export`에 대해 알아보자\r\n- `export` 할 모듈은 또한 무조건 `엄격 모드`\r\n- HTML 안에 작성한 스크립트에는 `import` 사용 불가\r\n\r\n\r\n### 사용법\r\n1. 기본 내보내기\r\n- 한 모듈에 하나만 내보내기 가능\r\n```javascript\r\n// 선언식\r\nexport default function() {};\r\nexport default function*() {};\r\nexport default class {};\r\n\r\n// 표현식\r\nexport default function name() {};\r\nexport default function* name() {};\r\nexport default class name {};\r\n\r\n```\r\n1. 1 import 시에는\r\n```javascript\r\n// 어떤식으로 네이밍 하던 상관없음, 하나만 export니까!\r\nimport anyName from 'export-default-module.js'\r\n\r\n// if function\r\nanyName()\r\n// if const, let, var\r\nanyName\r\n```\r\n\r\n2. 하나 or 여러개 내보내기\r\n```javascript\r\n// 하나씩\r\nexport const name1 ...;\r\nexport let name2... ;\r\nexport var name3...;\r\nexport function name4() {};\r\nexport class name5{}\r\n\r\n// 여려개\r\nexport {name1, name2, name3, name4};\r\n\r\n// with alias\r\nexport { name1 as aliasName, ...};\r\n```\r\n\r\n\r\n\r\n### 참조\r\n- [export - JavaScript - MDN Web Docs - Mozilla](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/export)\r\n\r\n\r\n##### 피드백은 언제나 환영입니다.\r\n","path":"export 파헤치기"},{"data":{"title":"import 파헤치기","date":"2022-08-16","tags":["TIL","Javascript"],"draft":false,"summary":"static import, dynamic import","mainCategory":"tech","subCategory":"javascript"},"content":"# import\r\n\r\n- `import` 할 모듈은 무조건 `엄격 모드`\r\n- HTML 안에 작성한 스크립트에는 `import` 사용 불가\r\n\t- 대신 `<script>` 태그의 `nomodule`속성을 이용해 가능\r\n- 정적 `import` 는 다른 모듈에서 `export` 한 바인딩을 가져올 떄 사용\r\n\t- 초기 의존성을 불러올 때 사용\r\n\t- 가져올 모듈은 `문자열` 만 허용\r\n- 동적 `import` 는 함수형 구문인 `import()` 를 사용\r\n\t- `type=\"module\"` 을 필요로 하지 않는다.\r\n\t- 모듈을 조건적으로 가져오고 싶을 때 사용\r\n\t- 필요할 때만 가져올 떄 사용\r\n\r\n\r\n## 정적 import\r\n### 사용법\r\n1. 기본값 가져오기\r\n\t- `module` 파일에서 `export default` 한 값 가져오기\r\n\t```javascript\r\n\timport a from 'module';\r\n\t```\r\n2. Name Space Import\r\n\t- 전체 모듈 가져오기\r\n\t```javascript\r\n\timport * as aliasA from 'module';\r\n\t```\r\n3. 하나의 멤버만 가져오기\r\n\t```javascript\r\n\timport { memberA } from 'module';\r\n\t```\r\n4. 여러 멤버 가져오기\r\n\t```javascript\r\n\timport { memberA, memberB } from 'module';\r\n\t```\r\n5. 별명 지정해서 멤버 가져오기\r\n\t```javascript\r\n\timport { realMemberName as aliasMemberName } from 'module';\r\n\timport { realMemberNameA as aliasMemberNameA, realMemberNameB as\r\n\taliasMemberNameB } from 'module';\r\n\t```\r\n6. 바인딩없이 모듈 전체의 사이드 이펙트 가져오기\r\n\t```javascript\r\n\timport 'module';\r\n\t```\r\n7. 기본값 가져오기 + 멤버 가져오기\r\n\t- 기본값 가져오기 먼저 선언 해야함\r\n\t```javascript\r\n\timport sampleDefault, * as aliasA from 'module';\r\n\t// or\r\n\timport sampleDefault, { memberA, memberB } from 'module';\r\n\t```\r\n\r\n## 동적 import\r\n- 제약이 존재\r\n\t1. `import` 문에 동적 매개변수 사용 불가\r\n\t\t```javascript\r\n\t\timport impossible from getModuleA(); \r\n\t\t```\r\n\t2. 모듈 경로는 원시 문자열만 가능, 함수 호출 결괏값을 경로로 사용 불가\r\n\t3. 런타임 or 조건부로 모듈을 불러올 수 없다는 점\r\n\t```javascript\r\n\tif(...conditionA) {\r\n\t\timport ...; // 조건부 호출 불가\r\n\t}\r\n\t// or\r\n\t{\r\n\t\timport ...; // 블록 안에서 호출 불가\r\n\t}\r\n\t```\r\n### 왜 제약이 있지?\r\n- `import/export`는 코드 구조의 중심을 잡아주는 역할이기 때문\r\n- 코드 구조 분석 -> 모듈을 모아 번들링 -> 미사용 모듈은 제거 하는 프로세스\r\n- 코드 구조가 간단 & 고정일 경우에만 가능\r\n\r\n### 사용법\r\n- `import(module)` -> 프로미스를 반환\r\n- 코드 내 어디서 동적으로 호출, 사용 가능\r\n```javascript\r\nimport('module path')\r\n\t.then(obj=>`obj === module object`)\r\n\t.catch(err => `loading err, e.g. no matched module`)\r\n```\r\n- 비동기 함수에서도 가능\r\n```javascript\r\nconst myFunction = async () => {\r\n\tconst module = await import('modulepath')\r\n\t...\r\n}\r\n```\r\n\r\n### 주의 \r\n- 일반 스크립트에서도 동작 `<script type=\"module\">` 불필요\r\n- 함수 호출 처럼 보이지만 함수 호출 아님\r\n- `super()` 처럼 괄호를 쓰는 특별한 문법\r\n- 그렇기에 `import`를 변수에 복사, 함수의 메소드인 `call/apply` 사용 불가\r\n\r\n\r\n### 참조\r\n- [import - JavaScript - MDN Web Docs - Mozilla](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/import)\r\n- [동적으로 모듈 가져오기 - 모던 JavaScript 튜토리얼](https://ko.javascript.info/modules-dynamic-imports)","path":"import 파헤치기"}]},"__N_SSG":true}