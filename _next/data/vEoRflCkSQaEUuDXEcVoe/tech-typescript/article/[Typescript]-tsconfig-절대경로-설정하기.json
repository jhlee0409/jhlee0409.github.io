{"pageProps":{"categories":[{"title":"blockchain","sub":[{"title":"DApp","count":1},{"title":"solidity","count":4}]},{"title":"platform","sub":[{"title":"AWS","count":2},{"title":"Google Analytics 4","count":1}]},{"title":"tech","sub":[{"title":"CS","count":1},{"title":"CSS","count":2},{"title":"Data_Structure_&_Algorithms","count":14},{"title":"HTML","count":1},{"title":"javascript","count":4},{"title":"markdown","count":1},{"title":"Next.js","count":1},{"title":"programming","count":3},{"title":"react","count":2},{"title":"refactoring","count":3},{"title":"typescript","count":2}]}],"data":{"title":"[Typescript] tsconfig 절대경로 설정하기","date":"2022-09-15","tags":["TIL","Typescript","tsconfig.json","jsconfig.json","Absolute paths"],"draft":false,"summary":"tsconfig.json 설정을 통해 절대경로를 설정해보자"},"content":"\r\n# 서론\r\n- 특정 컴포넌트나 파일을 `import`할 시 경로의 `depth`가 깊어지면 깊어질수록 `import`하려는 파일의 위치에 따라 `상대경로`가 상당히 길어질 수 있다.\r\n```javascript\r\n// 극단적인 예\r\nimport deep from '../../../../../../../A/B/C/file.js';\r\n\r\n// 이런게 수없이 많다면?\r\nimport deep1 from '../../../../../../../A/B/C/file1.js';\r\nimport deep2 from '../../../../../../../A/B/C/file2.js';\r\nimport deep3 from '../../../../../../../A/B/C/file3.js';\r\nimport deep4 from '../../../../../../../A/B/C/file4.js';\r\nimport deep5 from '../../../../../../../A/B/C/file5.js';\r\n...\r\n...\r\nimport deep999 from '../../../../../../../A/B/C/file5.js';\r\n```\r\n- 이런 식으로 상대경로가 길어지면 `import`할 파일을 찾기위한 수고가 커질 뿐더라 가독성 면에서도 좋지 않다.\r\n- `tsconfig.json` or `jsconfig.json`의 설정을 통해 `절대경로`를 설정할 수 있다\r\n\r\n# tsconfig.json 이란?\r\n- `typscript`에 대한 설정을 할 수 있는 파일이며 `javascript`로 이루어진 레포지토리라면 `jsconfig.json`을 사용한다.\r\n- 해당 레포지토리가 `Typescript`를 사용하고 있다면 루트 디렉토리에 `tsconfig.json`이 존재해야며 `tsc`명령어를 통한 컴파일시 로드한다.\r\n- 컴파일러에 대한 옵션 설정과 더불어 다양한 기능을 제공한다.\r\n```json\r\n// tsconfig.json 의 예시\r\n{\r\n  \"compilerOptions\": {\r\n    ...\r\n  },\r\n  \"include\": [...],\r\n  \"exclude\": [...]\r\n}\r\n```\r\n\r\n## 절대경로 설정하기\r\n- `tsconifg.json`에서 `compilerOptions` 옵션의 `baseUrl`과 `paths`를 이용해서 `절대경로`를 설정한다.\r\n- `baseUrl`의 경우 `paths`를 설정하기 위해서는 반드시 설정해야하는 옵션이다.\r\n- `paths`의 경우 `key-value`쌍으로 이루어진 객체이며 절대경로를 정의하고자 하는 경로의 이름을 `key`에 입력하며 `baseUrl`을 기준으로 상대적인 경로를 `value`에 입력한다.\r\n- `paths`의 `key`에는 주로 `@`으로 시작을 하며 바로 다음으로 `/, _` 같은 특수문자를 넣는데 이유는 `@`로 시작하는 패키지가 종종 있기 떄문이다.\r\n```json\r\n// tsconfig.json\r\n{\r\n  \"compilerOptions\": {\r\n    \"baseUrl\": \".\", // 이 경우는 tsconfig.json이 존재하는 루트 디렉토리를 기준으로 삼는다.\r\n    \"paths\": {\r\n      \"@_components/*\": [\"src/components/*\"],\r\n      \"@_apis/*\": [\"src/api/*\"],\r\n      \"@_types/*\": [\"src/types/*\"],\r\n      \"@_icons/*\": [\"public/assets/icons/*\"],\r\n      \"@_images/*\": [\"public/assets/images/*\"],\r\n      \"@_emojis/*\": [\"public/assets/emoji/*\"]\r\n    }\r\n  }\r\n}\r\n```\r\n- 위와 같은 `paths`를 지정한다면 실제로 루트 디렉토리를 기준으로한 구조는 다음과 같다\r\n```text\r\nRoot\r\n├─ public\r\n│   └─ assets\r\n│      ├─ icons\r\n│      ├─ images\r\n│      └─ emojis\r\n└─ src\r\n     ├─ components\r\n     ├─ api\r\n    └─ types\r\n```\r\n- 실제로 적용된 예시를 보자\r\n```typescript\r\nimport path1 from '@_components/home/main.tsx';\r\nimport path2 from '@_icons/sample.png';\r\nimport path2 from '@_apis/member'\r\n```\r\n- 특정 파일뿐만 아니라 모듈도 `절대경로`로 지정이 가능하다.\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \"baseUrl\": \".\",\r\n    \"paths\": {\r\n      \"jquery\": [\"node_modules/jquery/dist/jquery\"]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n# 추가\r\n\r\n- 절대경로를 추가하는 `paths`가 늘어나면 따로 빼놓는 것도 가능하다.\r\n- `tsconfig.json`의 `extends`옵션을 이용한다.\r\n- 기본 `config` 파일을 읽어온 후 `extends`에 지정한 파일에 의해 오버라이딩(overridden) 된다.\r\n- `include`나 `exclude`에 정의한 파일의 경우 기본 `config` 파일을 덮어쓴다.(overwrite)\r\n- `extends` 옵션은 스트링값으로만 받는다.\r\n- 여러 설정 파일을 `extend`하고 싶다면 줄줄이 이어받는 구조를 만들어야한다.\r\n    ```json\r\n    // tsconfig.a.json\r\n    {\r\n      \"compilerOptions\": {\r\n        ...\r\n      },\r\n    }\r\n    ```\r\n  ```json\r\n  // tsconfig.b.json\r\n  {\r\n    \"compilerOptions\": {\r\n      ...\r\n    },\r\n    \"extends\": \"./tsconfig.a.json\"\r\n  }\r\n    ```\r\n  ```json\r\n  // tsconfig.json\r\n  {\r\n    \"compilerOptions\": {\r\n      ...\r\n    },\r\n    \"extends\": \"./tsconfig.b.json\"\r\n  }\r\n    ```\r\n\r\n## 사용법\r\n- 위에 설정한 파일을 따로 만들어 저장해둔다.\r\n- 파일명은 어떤식으로 지어도 상관없으며, 어느 디렉토리에 속해도 된다. `json`형식이면 된다.\r\n- 아래의 경우 `tsconfig.path.json`을 루트 디렉토리에 만든다.\r\n\r\n```json\r\n// tsconfig.paths.json\r\n{\r\n  \"compilerOptions\": {\r\n    \"baseUrl\": \".\",\r\n    \"paths\": {\r\n      \"@_components/*\": [\"src/components/*\"],\r\n      \"@_apis/*\": [\"src/api/*\"],\r\n      \"@_types/*\": [\"src/types/*\"],\r\n      \"@_icons/*\": [\"public/assets/icons/*\"],\r\n      \"@_images/*\": [\"public/assets/images/*\"],\r\n      \"@_emojis/*\": [\"public/assets/emoji/*\"]\r\n    }\r\n  }\r\n}\r\n```\r\n- `tsconfig.json`에 `extends`옵션을 추가한 뒤 확장하고자하는 `json`을 파일을 `tsconifg.json`을 기준으로한` 상대경로`로 입력해준다.\r\n```json\r\n// tsconifg.json\r\n{\r\n  \"compilerOptions\": {\r\n    ...\r\n  },\r\n  \"extends\": \"./tsconfig.paths.json\"\r\n}\r\n```\r\n\r\n\r\n\r\n#\r\n\r\n### 참조\r\n- [TSConfig Reference](https://www.typescriptlang.org/tsconfig)\r\n- [Documentation - What is a tsconfig.json](https://www.typescriptlang.org/ko/docs/handbook/tsconfig-json.html)\r\n\r\n#\r\n\r\n#### 피드백은 언제나 환영입니다."},"__N_SSG":true}