{"pageProps":{"categories":[{"title":"blockchain","sub":[{"title":"DApp","count":1},{"title":"solidity","count":2}]},{"title":"tech","sub":[{"title":"refactoring","count":3},{"title":"typescript","count":1}]},{"title":"til","sub":[{"title":"AWS","count":1},{"title":"CS","count":1},{"title":"CSS","count":1},{"title":"Google Analytics 4","count":1},{"title":"javascript","count":2},{"title":"markdown","count":1},{"title":"programming","count":2},{"title":"react","count":2}]}],"data":[{"data":{"title":"Solidity 01","date":"2022-08-28","tags":["TIL","Udemy","Blockchain","Solidity","Remix"],"draft":false,"summary":"Solidity 입문"},"content":"\n## Remix\n- `스마트 계약`을 개발, 배포, 관리할 수 있는 통합 개발 환경\n\n### 스마트 계약이란?\n- 두 계약 당사자 간에 이뤄지는 협의에 대한 자동화된 계약\n\n### 스마트 계약의 유용성\n- 새로운 시스템이 기존의 블록체인 네트워크를 활용할 수 있다.\n    - 자체 블록체인을 만드는 것에는 많은 리소스가 투입된다.\n    - `이더리움`과 같은 기존의 블록체인을 이용해서 `스마트 게약`을 통해 해당 블록체인을 활용\n\n\n## Solidity란?\n- `스마트 계약`의 작성과 구현 위한 객체 지향 프로그래밍 언어\n\n## 0. import solidity\n\n```solidity\n// 0.7.0 <= solidity <0.9.0; 를 의미\npragma solidity >=0.7.0 <0.9.0;\n```\n\n\n\n## 1. 변수\n\n- 값을 저장하기 위해 예약된 메모리 공간\n- `정수(integer)`, `문자열(string)`, `불리언(bool)`\n\n```solidity\n// 계약 정의\ncontract simpleStorage {\n    // type name = value;\n\tuint storeData = 23;\n\tstring names = 'jack';\n\tbool switchOn = true;\n}\n```\n\n## 2. 함수\n\n- 애플리케이션 어디에서나 사용할 수 있는 재사용이 가능한 코드 그룹\n- `arguments`에는 넘길 값과 함께 앞에 타입을 정해준다.\n```solidity\nfunction set(uint x) {\n    // variable = new value\n\tstoreData = x;\n};\n\n```\n\n## 3. public\n\n- `contract` 외부에서 호출 가능\n- 다른 `contract`에서도 `public`이 붙은 함수 호출 가능\n- 반대는 `private`\n\n```solidity\nfunction set(uint x) public {\n\tstoreData = x;\n};\n```\n\n## 4. view\n\n- `state`를 수정할 수 없다는 것을 알리는 전역 제어자(Global Modifier)\n- 오직 `read`만 가능\n\n```solidity\nfunction get() public view {\n\treturn storeData;\n}\n```\n\n## 4. returns\n\n- 함수 자체와 관련이 있다.\n- `storeData`를 반환하는 것이 아님\n- `contract`에 대한 `state`를 반환하게 해준다.\n- e.g. `returns (uint)` : `정수` 타입의 `state`를 `return`하겠다는 뜻\n\n```solidity\nfunction get() public view returns (uint) {\n\treturn storeData;\n}\n```\n\n#\n\n#### 피드백은 언제나 환영입니다.\n\n","path":"Solidity 01"},{"data":{"title":"Solidity 컴파일 & 디버깅","date":"2022-09-03","tags":["TIL","Remix","Solidity","Compile","Debugging"],"draft":false,"summary":"Remix를 이용해서 컴파일 & 디버깅 해보자"},"content":"\n# 서론\n\n- `Solidity`는 구문이 끝나면 `;` 을 붙여주어야한다.\n- 붙이지 않고 컴파일 할 시 어떤 에러를 띄워주는지 알아보자.\n\n# 컴파일 하기\n\n- `Remix` 좌측 메뉴에서 컴파일 버튼을 눌러준다.\n\n![Remix 좌측 메뉴](/assets/posts/blockchain/solidity/Solidity-컴파일-&-디버깅/01.png)\n\n- 그럼 아래와 같은 화면이 나온다.\n- 기본적인 설정은 둔 채 `CONTANCT`에서 컴파일할 계약을 선택한 후  컴파일 한다.\n\n![Remix 컴파일 페이지](/assets/posts/blockchain/solidity/Solidity-컴파일-&-디버깅/02.png)\n\n# 에러 테스트\n\n> e.g. `storeData`에 `;` 을 제거한 후 컴파일 해보자\n\n![;을 제거해보자](/assets/posts/blockchain/solidity/Solidity-컴파일-&-디버깅/03.png)\n\n\n- `Remix`에서 컴파일 했을 시에 결과 화면이다.\n![Remix 컴파일 이후](/assets/posts/blockchain/solidity/Solidity-컴파일-&-디버깅/04.png)\n\n\n- `line:21`에 에러 표시가 뜨지만 해당 `line`의 코드는 문제 없다.\n- 에러 메세지를 확인해보자\n- `;` 이 올걸 예상했지만 `function` 이 있다는 얘기다.\n- 이는 `line:18`에서 `;` 을 붙여야만 해당 구문이 끝났다고 이해를 하는데 예상치도 못한 코드가 이어졌기 때문이다.\n\n![파싱 에러](/assets/posts/blockchain/solidity/Solidity-컴파일-&-디버깅/05.png)\n\n\n# 해결\n\n- `line 21`에서 `;`을 추가 해주면 해결!\n![; 추가 이후 컴파일](/assets/posts/blockchain/solidity/Solidity-컴파일-&-디버깅/06.png)\n\n\n# 결론\n\n- 에러를 발생시키는 `line`이 아닌 그 다음 구문에서 에러를 띄워주기 때문에 혼란스러울 수 있다.\n- 에러를 띄워주는 `line` 이전 코드들을 확인해보는 습관을 들이자.\n\n## 추가\n\n- 컴파일이 정상적으로 이루어 졌을 때, [SPDX 라이선스](https://en.wikipedia.org/wiki/Software_Package_Data_Exchange) 식별자를 추가하지 않았다는 경고문을 볼 수 있다.\n- 여기서는 테스트 이기 때문에 따로 라이선스 식별자는 필요하지 않다.\n\n![경고 문구](/assets/posts/blockchain/solidity/Solidity-컴파일-&-디버깅/07.png)\n\n#### 피드백은 언제나 환영입니다.","path":"Solidity 컴파일 & 디버깅"}]},"__N_SSG":true}