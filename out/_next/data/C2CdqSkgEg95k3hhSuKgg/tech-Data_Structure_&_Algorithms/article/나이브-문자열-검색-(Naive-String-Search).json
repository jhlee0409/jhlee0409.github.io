{"pageProps":{"categories":[{"title":"blockchain","sub":[{"title":"DApp","count":1},{"title":"solidity","count":4}]},{"title":"platform","sub":[{"title":"AWS","count":2},{"title":"Google Analytics 4","count":1}]},{"title":"tech","sub":[{"title":"CS","count":1},{"title":"CSS","count":2},{"title":"Data_Structure_&_Algorithms","count":14},{"title":"HTML","count":1},{"title":"javascript","count":4},{"title":"markdown","count":1},{"title":"Next.js","count":1},{"title":"programming","count":3},{"title":"react","count":2},{"title":"refactoring","count":3},{"title":"typescript","count":2}]}],"data":{"title":"나이브 문자열 검색 (Naive String Search)","date":"2022-10-09","tags":["TIL","Udemy","Algorithm","나이브 문자열 검색","Naive String Search"],"draft":false,"summary":"나이브 문자열 검색에 대해 알아보자"},"content":"\r\n&nbsp;\r\n\r\n\r\n# 나이브 문자열 검색 (Naive String Search)\r\n\r\n- 긴 문자열에서 부분 문자열을 검색하는 것과 관련이 있다.\r\n- 긴 문자열에서 짧은 문자열이 등장하는 횟수를 세야하는 상황에서 쓰인다.\r\n- 간단한 접근법 중 하나는 문자 하나씩 확인하는 것이다.\r\n\r\n&nbsp;\r\n\r\n# 나이브 문자열 검색의 의사코드 (Pseudocode)\r\n\r\n- 긴 문자열 1개와 짧은 문자열(찾으려는 문자열) 1개를 인자로 받는 함수를 작성한다.\r\n- 긴 문자열의 각 문자를 반복하는 루프를 작성하고 그 안에 짧은 문자열을 반복하는 루프도 하나 작성한다.\r\n- 문자가 일치하지 않으면 내부 루프를 벗어난다. (루프를 멈춘다)\r\n- 문자가 일치하면 계속 진행한다.\r\n- 만약 내부 루프를 완료하고 일치하는 문자열을 찾았으면 `count`를 증가시키고 마지막에 그 `count`를 반환한다.\r\n- 일치하는 문자열이 하나도 없으면 `0` 반환한다.\r\n- 긴 문자열을 반복하는 루프를 만드는 데, 그 루프 안에는 짧은 문자열을 반복하는 중첩(nested loop)가 있다.\r\n- 짧은 문자열의 끝에 도달했는데 아직 루프에서 벗어나지 못했으면 `count`를 `1`을 더한다.\r\n- 루프를 벗어나지 못했다는 뜻은 일치하는 짧은 문자열과 일치하는 문자열을 찾았다는 뜻이다.\r\n\r\n&nbsp;\r\n\r\n## 나이브 문자열 검색 구현\r\n\r\n```jsx\r\nconst naiveSearch = (long, short) => {\r\n    let count = 0;\r\n    for (let i = 0; i < long.length; i++) {\r\n        for (let j = 0; j < short.length; j++) {\r\n            if (short[j] !== long[i + j]) break;\r\n            if (j === short.length - 1) count++;\r\n        }\r\n    }\r\n    return count;\r\n};\r\n\r\nnaiveSearch(\"lorie loled\", \"lol\"); // 1\r\n```\r\n\r\n\r\n\r\n---\r\n\r\n#### 피드백은 언제나 환영입니다."},"__N_SSG":true}