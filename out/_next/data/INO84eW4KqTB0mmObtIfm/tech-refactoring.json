{"pageProps":{"categories":[{"title":"blockchain","sub":[{"title":"DApp","count":1},{"title":"solidity","count":3}]},{"title":"tech","sub":[{"title":"refactoring","count":3},{"title":"typescript","count":1}]},{"title":"til","sub":[{"title":"AWS","count":1},{"title":"CS","count":1},{"title":"CSS","count":1},{"title":"Google Analytics 4","count":1},{"title":"javascript","count":2},{"title":"markdown","count":1},{"title":"programming","count":2},{"title":"react","count":2}]}],"data":[{"data":{"title":"리팩터링 2판 스터디 Chapter 01","date":"2022-04-01","tags":["TIL","Javascrpit","Refactoring 2nd"],"draft":false,"summary":"Chapter 01 - 리팩터링: 첫 번째 예시"},"content":"\r\n# 리팩터링 2판 스터디\r\n\r\n## Chapter 01 - 리팩터링: 첫 번째 예시\r\n\r\n1. 프로그램이 새로운 기능을 추가하기에 편한 구조가 아니라면, 먼저 기능을 추가하기 쉬운 형태로 리팩터링하고 나서 원하는 기능을 추가한다.\r\n2. 리팩터링하기 전에 제대로 된 테스트부터 마련한다. 테스트는 반드시 자가진단하도록 만든다.\r\n3. 컴퓨터가 이해하는 코드는 바보도 작성할 수 있다. 사람이 이해하도록 작성하는 프로그래머가 진정한 실력자다\r\n\r\n- 함수쪼개기 작업\r\n  - 함수 추출하기\r\n  - 쪼갤려는 함수와 관련있는 문장들 한군데 모으기\r\n    - (변수 초기화선언을 관련 함수 앞라인에 모은다거나)\r\n- 임시 변수를 질의 함수로 바꾸기\r\n- 반복문을 파이프라인으로 바꾸기\r\n- 반복문 쪼개기\r\n- 조건부 로직을 다형성으로 바꾸기\r\n- 임시변수 삭제 및 변수 인라인하기\r\n\r\n```jsx\r\n//리팩터링 전...\r\nlet result = ``;\r\nconst sampleFunction = () => {\r\n  //...\r\n};\r\n\r\nlet sample = sampleFunction();\r\nresult += sample;\r\n\r\n//리팩터링 후\r\nlet result = ``;\r\nconst sampleFunction = () => {\r\n  //...\r\n};\r\n\r\n// 임시변수 제거 => let GA4 = sampleFunction();\r\nresult += sampleFunction();\r\n```\r\n\r\n- 매개변수 간소화\r\n\r\n1. 반복문 쪼개기 → 변수 값을 누적시키는 부분을 분리\r\n2. 문장 슬라이드하기 → 변수 초기화 문장을 변수 값 누적 코드 바로 앞으로 옮김\r\n3. 함수 추출하기→ 특정 내부 로직을 별도 함수로 추출\r\n4. 변수 인라인하기 → 변수 제거\r\n\r\n## Chapter 02 - 리팩터링 원칙\r\n","path":"리팩터링 2판 스터디 Chapter 01"},{"data":{"title":"리팩터링 2판 스터디 Chapter 03","date":"2022-04-01","tags":["TIL","Javascrpit","Refactoring 2nd"],"draft":false,"summary":"Chapter 03 - 코드에서 나는 악취"},"content":"\r\n# Chapter 03 - 코드에서 나는 악취\r\n\r\n## 개요\r\n\r\n- 리팩터링을 언제 시작하고 언제 그만둘지 판단하는 것 또한 중요하다.\r\n- 그만두는 시점은 숙련자의 직관만큼 정확한 것이 없다\r\n\r\n## 3.1 기이한 이름\r\n\r\n- 이름만 보고도 무슨 일을하고 어떻게 사용하는지 명확하게 알 수 있도록 지어야한다.\r\n- 방식\r\n  1. `함수 선언 바꾸기 6.5절`\r\n  2. `변수 이름 바꾸지 6.7절`\r\n  3. `필드 이름 바꾸기 9.2절`\r\n\r\n## 3.2 중복 코드\r\n\r\n- 방식\r\n  1. `함수 추출하기 6.1절`\r\n     - 한 클래스에 딸른 두 메서드가 똑같은 표현식을 사용하는 경우 2.`문장 슬라이드하기 8.6절`\r\n     - 코드가 비슷하긴 한데 완전히 똑같지 않다면 ⇒ 비슷한 부분을 한 곳에 모아 `함수 추출하기`를 더 쉽게 적용할 수 있는지 확인\r\n  2. `메서드 올리기 12.1절`\r\n     - 같은 부모로부터 파생된 서브 클래스들에 코드가 중복되어 있다면 ⇒ 각자 따로 호출되지 않도록 `위 방식`을 적용해 부모로 옮긴다.\r\n\r\n## 3.3 긴 함수\r\n\r\n- 짧은 함수의 장점\r\n  - 간접 호출(indirection)의 효과 = 코드를 이해하고, 공유하고, 선택하기 쉬워진다.\r\n- 주석을 달아야 할 만한 부분은 무조건 함수로 만든다.\r\n  본문에는 원래 주석으로 설명하려던 코드가 담기고, 함수 이름은 동작 방식이 아닌 의도가 드러나게 된다.\r\n- 원래 코드보다 길어지더라도 함수로 뽑는다. ⇒ 단 함수 이름에 코드의 목적이 드러나야 한다.\r\n- 핵심\r\n  - 함수의 길이가 아닌, 함수의 목적(의도)과 구현 코드의 괴리가 얼마나 큰가\r\n  - 즉, ‘무엇을 하는지’를 코드가 잘 설명해주지 못할수록 함수로 만드는게 유리하다.\r\n- 방식\r\n  1. 99%는 `함수 추출하기 6.1절`\r\n     - 함수 본문에서 따로 묶어 빼내면 좋은 코드 덩어리를 찾아 새로운 함수로 만드는 것\r\n     - 함수가 매개변수와 임수 변수가 많으면 추출하는 데 방해가 된다\r\n       - 임시 변수의 수 ⇒ `임시 변수를 질의 함수로 바꾸기 7.4절` 을 사용하여 조절\r\n       - 매개 변수의 수 ⇒ `매개변수 객체 만들기 6.8절` 과 `객체 통째로 넘기기 11.4절`을 사용하여 조절\r\n       - 그래도 많다? ⇒ `함수를 명령으로 바꾸기 11.9절`을 고려해보자\r\n     - 추출할 덩어리는 어디서?\r\n       1. 주석 참고하기\r\n          - 주석 ⇒ 코드만으로는 목적을 이해하기 어려울 때 달려있는 경우가 많음\r\n          - 주석 + 주석이 설명하는 코드 ⇒ 함수로 빼기 ⇒ 함수 이름은 주석 내용을 토대로 짓기\r\n          - 코드가 단 한 줄이어도 따로 설명을 해야한다? ⇒ 함수로 추출 권장\r\n       2. 조건문\r\n          - `조건문 분해하기 10.1절`로 대응\r\n          - switch 구문 ⇒ 각 case마다 `함수 추출하기 6.1절` 적용 ⇒ 함수 호출문 하나로 바꾼다\r\n          - 같은 조건을 기준으로 나뉘는 switch문이 여러개다? ⇒ `조건부 로직을 다형성으로 바꾸기 10.4절`를 적용\r\n       3. 반목문\r\n          - 그 안의 코드와 함께 추출해서 독립된 함수로 만든다.\r\n          - 추출한 반목문 코드에서 적절한 이름이 안 떠오른다? ⇒ 성격이 다른 두 가지 작업이 존재 ⇒ `반목문 쪼개기 8.7절`를 적용해서 분리\r\n\r\n## 3.4 긴 매개변수 목록\r\n\r\n- 매개변수가 많아지면 이해하기 어려워진다\r\n- 방식\r\n  1. 종종 다른 매겨변수에서 값을 얻어올 수 있는 매개변수가 존재 ⇒ `매개변수를 질의 함수로 바꾸기 11.5절`로 제거\r\n  2. 사용 중인 데이터 구조에서 값들을 뽑아 각각 을 별개의 매개변수로 전달하는 코드 ⇒ `객체 통째로 넘기기 11.4절`를 적용 ⇒ 원본 데이터구조를 그대로 전달\r\n  3. 항상 함께 전달되는 매개변수들 ⇒ `매개변수 객체 만들기 6.8절`를 사용 ⇒ 하나로 묶는다\r\n  4. 함수의 동작 방식을 정하는 플래그 역할의 매개변수 ⇒ `플래그 인수 제거하기 11.3절`로 제거\r\n  5. 클래스 = 매개변수를 줄이는 데 효과적인 수단\r\n     - 특히 여러 개의 함수가 특정 매개변수들의 값을 공통으로 사용할 때 유용 ⇒ `여러 함수를 클래스로 묶기 6.9절`를 이용 ⇒ 공통 값들을 클래스의 필드로 정의\r\n     - 함수형 프로그래밍이였다? ⇒ 일련의 부분적용 함수들을 생성한다 라고 한다.\r\n\r\n## 3.5 전역 데이터\r\n\r\n- 전역 변수는 디버깅을 힘들게 하고 문제를 일으킬 소지가 분명하다. 수가 많으면 많아질수록 이에 따른 피해는 고스란히 개발자에게 돌아온다.\r\n- 가변 전역 데이터라면 다루기 더 까다롭다.\r\n- 대표적인 형태\r\n  1. 대부분 전역변수\r\n  2. 클래스 변수\r\n  3. 싱글톤\r\n- 방식\r\n  1. `변수 캡슐화 하기 6.6절`\r\n     - 함수로 감싸는 것만으로도 데이터를 수정하는 부분을 쉽게 찾을 수 있고 접근 통제 가능하다.\r\n     - 접근자 함수들을 클래스나 모듈에 집어넣고 그 안에서만 사용할 수 있도록 접근 범위를 최소화 하는 것이 좋다.\r\n\r\n## 3.6 가변 데이터\r\n","path":"리팩터링 2판 스터디 Chapter 03"},{"data":{"title":"리팩터링 2판 스터디 Chapter 06","date":"2022-04-01","tags":["TIL","Javascrpit","Refactoring 2nd"],"draft":false,"summary":"Chapter 01 - 리팩터링: 첫 번째 예시"},"content":"\r\n# 리팩터링 2판 스터디\r\n\r\n## Chapter 06 - 기본적인 리팩터링\r\n\r\n### 6.1 함수 추출하기\r\n\r\n1. 배경\r\n\r\n- 추출할 코드의 목적에 맞는 함수명을 짓는다면 더이상 해당 코드를 볼 필요도 없다.\r\n- 해당 코드를 다시 볼 경우에도 목적이 드러나기 때문에 쉽게 해석 가능하다.\r\n","path":"리팩터링 2판 스터디 Chapter 06"}]},"__N_SSG":true}