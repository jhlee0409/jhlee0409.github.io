{"pageProps":{"categories":[{"title":"blockchain","sub":[{"title":"DApp","count":1},{"title":"solidity","count":4}]},{"title":"platform","sub":[{"title":"AWS","count":2},{"title":"Google Analytics 4","count":1}]},{"title":"tech","sub":[{"title":"CS","count":1},{"title":"CSS","count":2},{"title":"Data_Structure_&_Algorithms","count":3},{"title":"HTML","count":1},{"title":"javascript","count":4},{"title":"markdown","count":1},{"title":"Next.js","count":1},{"title":"programming","count":3},{"title":"react","count":2},{"title":"refactoring","count":3},{"title":"typescript","count":2}]}],"data":{"title":"[Solidity] 04. Solidity 용어","date":"2022-09-12","tags":["TIL","Solidity","Address","Mapping","Variables","Modifier","Constructor"],"draft":false,"summary":"Solidity에서 주로 사용되는 용어를 알아보자"},"content":"\n## Address 주소\n\n- `20 byte` 형식의 변수 타입\n- 주소로 선언한 변수는 이더리움 주소가 되도록 설정한다.\n\n```solidity\naddress wallet\naddress payable[] wallets\n```\n\n## Mapping 매핑\n\n- 값에 대한 참조를 가진다.\n- 키-값 쌍으로 구성된 해시 테이블을 생성 (키-값을 쌍으로 저장)\n- 각 키를 추적할 수 있도록 테이블을 만든다.\n\n```solidity\nmapping(_KeyType => _ValueType)\n\n// 주소를 정수에 매핑\nmapping(address => uint) public balances;\n```\n\n![출처: 참조 링크로!, [Mappings in Solidity Explained in Under Two Minutes]](https://miro.medium.com/max/429/1*H415ldFYnS2aRTx1YIQiKg.png)\n\n\n## Scope of Variables 변수의 범위\n\n- `State Variables` (상태 변수)\n    - 값이 계약 저장소(contract storage)에 영구적으로 저장되는 변수입니다.\n    - 계약 저장소로 가도록 선언된 변수 = 상태 변수\n    - 모든 함수와 계약에서 접근 가능\n    - 변수로 선언된 것\n- `Local Variables` (지역 변수)\n    - 해당 함수 안에서 선언된 변수\n    - 선언된 함수 안에서만 접근 가능\n\n```solidity\ncontract TestStroage {\n\tuint balance;  // state variable\n\n\tfunction set(uint x) public {\n\t\tstring value = 'data'; // local variable\n\t}\n}\n```\n\n- Global Variables (전역 변수)\n    - `global namespace(전역 네임스페이스)`에 존재하는 특수 변수\n    - 블록체인에 존재하는 정보를 가져올 때 이 변수를 사용\n\n![전역 변수들](/assets/posts/blockchain/solidity/Solidity-04-Solidity-용어/01.png)\n\n## Modifier 제어자\n\n- 함수의 실행을 제어하거나 수정할 수 있게 해준다.\n\n```solidity\ncontract Test {\n\taddress testAddress;\n\tconstructor() {\n\t\ttestAddress = msg.sender;\n\t}\n\t\n\t// testAddress 와 mag.sender가 일치하는 경우에만 함수 실행\n    // 다양한 조건들을 걸 수 있다.\n\tmodifier onlyOwner {\n\t\tif (msg.sender == testrAddress) {\n\t\t\t_; // keep going!\n\t\t}\n\t}\n\t// 사용법\n    // onlyOwner의 조건을 만족하는 경우에만 함수 실행\n\tfunction testFn() public onlyOwner {\n\t\t// ...\n\t}\n}\n```\n\n## Constructor 생성자\n\n- `constructor`는 `constructor` 키워드를 사용하여 선언된 함수이다.\n- 계약 생성 시에만 실행됩니다.\n- `constructor`를 작성하지 않는 경우 `contract`는 기본 생성자로 간주됩니다.\n\n```solidity\ncontract Test {\n\taddress testAddress;\n\n\tconstructor() {\n\t\ttestAddress = msg.sender;\n\t}\n}\n```\n\n#\n\n### 참조\n\n- [Solidity - Variables](https://www.tutorialspoint.com/solidity/solidity_variables.htm)\n- [Mappings in Solidity Explained in Under Two Minutes](https://medium.com/upstate-interactive/mappings-in-solidity-explained-in-under-two-minutes-ecba88aff96e)\n\n#\n\n#### 피드백은 언제나 환영입니다."},"__N_SSG":true}