{"pageProps":{"categories":[{"title":"blockchain","sub":[{"title":"DApp","count":1},{"title":"solidity","count":4}]},{"title":"platform","sub":[{"title":"AWS","count":2},{"title":"Google Analytics 4","count":1}]},{"title":"tech","sub":[{"title":"CS","count":1},{"title":"CSS","count":2},{"title":"Data_Structure_&_Algorithms","count":11},{"title":"HTML","count":1},{"title":"javascript","count":4},{"title":"markdown","count":1},{"title":"Next.js","count":1},{"title":"programming","count":3},{"title":"react","count":2},{"title":"refactoring","count":3},{"title":"typescript","count":2}]}],"data":[{"data":{"title":"[Solidity] 04. Solidity 용어","date":"2022-09-12","tags":["TIL","Solidity","Address","Mapping","Variables","Modifier","Constructor"],"draft":false,"summary":"Solidity에서 주로 사용되는 용어를 알아보자","mainCategory":"blockchain","subCategory":"solidity"},"content":"\n## Address 주소\n\n- `20 byte` 형식의 변수 타입\n- 주소로 선언한 변수는 이더리움 주소가 되도록 설정한다.\n\n```solidity\naddress wallet\naddress payable[] wallets\n```\n\n## Mapping 매핑\n\n- 값에 대한 참조를 가진다.\n- 키-값 쌍으로 구성된 해시 테이블을 생성 (키-값을 쌍으로 저장)\n- 각 키를 추적할 수 있도록 테이블을 만든다.\n\n```solidity\nmapping(_KeyType => _ValueType)\n\n// 주소를 정수에 매핑\nmapping(address => uint) public balances;\n```\n\n![출처: 참조 링크로!, [Mappings in Solidity Explained in Under Two Minutes]](https://miro.medium.com/max/429/1*H415ldFYnS2aRTx1YIQiKg.png)\n\n\n## Scope of Variables 변수의 범위\n\n- `State Variables` (상태 변수)\n    - 값이 계약 저장소(contract storage)에 영구적으로 저장되는 변수입니다.\n    - 계약 저장소로 가도록 선언된 변수 = 상태 변수\n    - 모든 함수와 계약에서 접근 가능\n    - 변수로 선언된 것\n- `Local Variables` (지역 변수)\n    - 해당 함수 안에서 선언된 변수\n    - 선언된 함수 안에서만 접근 가능\n\n```solidity\ncontract TestStroage {\n\tuint balance;  // state variable\n\n\tfunction set(uint x) public {\n\t\tstring value = 'data'; // local variable\n\t}\n}\n```\n\n- Global Variables (전역 변수)\n    - `global namespace(전역 네임스페이스)`에 존재하는 특수 변수\n    - 블록체인에 존재하는 정보를 가져올 때 이 변수를 사용\n\n![전역 변수들](/assets/posts/blockchain/solidity/Solidity-04-Solidity-용어/01.png)\n\n## Modifier 제어자\n\n- 함수의 실행을 제어하거나 수정할 수 있게 해준다.\n\n```solidity\ncontract Test {\n\taddress testAddress;\n\tconstructor() {\n\t\ttestAddress = msg.sender;\n\t}\n\t\n\t// testAddress 와 mag.sender가 일치하는 경우에만 함수 실행\n    // 다양한 조건들을 걸 수 있다.\n\tmodifier onlyOwner {\n\t\tif (msg.sender == testrAddress) {\n\t\t\t_; // keep going!\n\t\t}\n\t}\n\t// 사용법\n    // onlyOwner의 조건을 만족하는 경우에만 함수 실행\n\tfunction testFn() public onlyOwner {\n\t\t// ...\n\t}\n}\n```\n\n## Constructor 생성자\n\n- `constructor`는 `constructor` 키워드를 사용하여 선언된 함수이다.\n- 계약 생성 시에만 실행됩니다.\n- `constructor`를 작성하지 않는 경우 `contract`는 기본 생성자로 간주됩니다.\n\n```solidity\ncontract Test {\n\taddress testAddress;\n\n\tconstructor() {\n\t\ttestAddress = msg.sender;\n\t}\n}\n```\n\n#\n\n### 참조\n\n- [Solidity - Variables](https://www.tutorialspoint.com/solidity/solidity_variables.htm)\n- [Mappings in Solidity Explained in Under Two Minutes](https://medium.com/upstate-interactive/mappings-in-solidity-explained-in-under-two-minutes-ecba88aff96e)\n\n#\n\n#### 피드백은 언제나 환영입니다.","path":"[Solidity] 04. Solidity 용어"},{"data":{"title":"[Solidity] 03. 스마트 계약 배포 및 트랜잭션","date":"2022-09-04","tags":["TIL","Remix","Solidity","Deploy","Transaction"],"draft":false,"summary":"Remix를 이용해서 스마트 계약을 배포하고 트랜잭션 해보자","mainCategory":"blockchain","subCategory":"solidity"},"content":"\r\n# 서론\r\n- 계약을 작성했다면 배포하고 실제로 트랜잭션을 해보자.\r\n- [Solidity 01](https://jhlee0409.github.io/blockchain-solidity/article/Solidity-01)에서 작성한 기본적인 `contract`로 배포를 진행할 예정이다.\r\n\r\n\r\n# 스마트 계약 배포하기\r\n\r\n- 배포를 위해 `Remix` 좌측 메뉴에서 `Deploy & run transactions` 버튼을 클릭해준다.\r\n\r\n![Remix 좌측 메뉴](/assets/posts/blockchain/solidity/Solidity-03/01.png)\r\n\r\n## 설정하기\r\n- 배포 페이지에서는 아래와 같은 배포를 위한 설정을 할 수 있다.\r\n\r\n![배포 환경 설정](/assets/posts/blockchain/solidity/Solidity-03/02.png)\r\n\r\n#### 각 설정 설명\r\n- `ENVIRONMENT` : 배포할 환경 선택 / `VM = Virtual Machine`\r\n- `ACCOUNT` : 목록을 열어보면 여러 계정들이 있는데 전부 이더를 보내거나 스마트 계약과 트랜잭션을 위한 `테스트 계정`이다.\r\n- `GAS LIMIT` : 트랜잭션에 사용되는 가스비(수수료)의 최대치\r\n- `VALUE` : 계약이나 이더 전송 스마트 계약에 쓰이는 값을 설정한다. `ETH, WEI, GWE`는 `ml, l`와 같은 ETH의 단위\r\n- `CONTRACT` : 실행 및 배포할 계약을 선택\r\n\r\n## 배포하기\r\n- 배포 설정이 끝났다면 `Deploy`를 클릭한다.\r\n- 배포를 진행하면 콘솔 창에서 결과를 확인할 수 있다.\r\n\r\n![우측 Debug를 클릭하면 상세 정보를 확인할 수 있다.](/assets/posts/blockchain/solidity/Solidity-03/03.png)\r\n\r\n- 좌측에 성공 체크가 있으면 배포를 성공적으로 완료했다는 뜻이다.\r\n- `0x5B3…eddc` = 계정 주소\r\n- 해당 계정을 통해 스마트 계약을 블록체인에 업로드 했기 때문에 이더를 소모 (가스비)\r\n- 해당 계정에서 `simpleStorage` 를 배포했다는 것도 확인 가능\r\n- 이외에도 배포를 위해 설정했던 값들을 볼 수 있다.\r\n\r\n# 스마트 계약과 트랜잭션하기\r\n\r\n- 배포를 성공하고 나면 이제 트랜잭션이 가능하다. 바로 한번 해보자!\r\n\r\n## 배포 이후 추가된 정보 확인\r\n\r\n- 배포 이후 `배포 설정` 하단에 아래와 같은 부분이 생겨났을 것이다.\r\n- 배포한 스마트 계약(`simpleStorage`)이 보일 것이다.\r\n\r\n![배포 성공 이후 새로운 부분이 나타난다.](/assets/posts/blockchain/solidity/Solidity-03/04.png)\r\n![해당 계약 좌측에 화살표를 누르면 상세 정보를 볼 수 있다.](/assets/posts/blockchain/solidity/Solidity-03/05.png)\r\n\r\n- `set`과 `get`은 `simpleStorage` 계약에서 만든 `function`이다.\r\n- 해당 `function`은 `Remix IDE`에서 사용할 수 있게 된다.\r\n- 따라서 데이터를 저장하고 가져오는 것이 가능하다. (`set`과 `get`을 만들었으니)\r\n\r\n## `set()` 트랜잭션 실행하기\r\n\r\n> e.g. `set`에 `68`을 입력하고 `set 버튼`을 누르면 트랜잭션이 일어난다.\r\n\r\n![set에 68을 입력한다.](/assets/posts/blockchain/solidity/Solidity-03/06.png)\r\n![트랙잭션 결과는 콘솔 창에서 확인 가능하다.](/assets/posts/blockchain/solidity/Solidity-03/07.png)\r\n![우측 화살표를 누르면 상세 정보 확인 가능하다.](/assets/posts/blockchain/solidity/Solidity-03/08.png)\r\n\r\n- 트랜잭션이 발생할 때마다 가스비가 발생한다.\r\n- 트랜잭션이 어느 계정에서 발생했는지 알 수 있다. (`from`)\r\n- 스마트 계약의 주소도 확인 가능하다. (`to`)\r\n\r\n## `get()` 트랜잭션 실행하기\r\n\r\n- `set`을 이용해 데이터를 저장했다면 당연 `get`을 이용해 저장한 데이터를 불러올 수 있다.\r\n- `get`버튼을 누르면 바로 트랜잭션이 일어난다.\r\n- 저장한 데이터를 불러오는 것은 거래가 발생하는 것이 아니기에 가스비가 발생하지 않는다.\r\n\r\n![get을 누르면 set에서 입력한 68을 반환한다.](/assets/posts/blockchain/solidity/Solidity-03/09.png)\r\n![콘솔 창에서 결과를 확인 할 수 있다.](/assets/posts/blockchain/solidity/Solidity-03/10.png)\r\n\r\n# 결론\r\n\r\n- 모든 트랜잭션은 블록체인에 기록된다.\r\n- 이로써 `DApp`에서 블록체인 개발에 필요한 기본적인 내용을 학습했다.\r\n\r\n#\r\n\r\n### 참조\r\n\r\n[remix Deploy & Run](https://remix-ide.readthedocs.io/en/latest/run.html)\r\n\r\n#\r\n\r\n#### 피드백은 언제나 환영입니다.","path":"[Solidity] 03. 스마트 계약 배포 및 트랜잭션"},{"data":{"title":"[Solidity] 02. Remix를 이용한 컴파일 및 디버깅","date":"2022-09-03","tags":["TIL","Remix","Solidity","Compile","Debugging"],"draft":false,"summary":"Remix를 이용해서 컴파일 & 디버깅 해보자","mainCategory":"blockchain","subCategory":"solidity"},"content":"\n# 서론\n\n- `Solidity`는 구문이 끝나면 `;` 을 붙여주어야한다.\n- 붙이지 않고 컴파일 할 시 어떤 에러를 띄워주는지 알아보자.\n\n# 컴파일 하기\n\n- `Remix` 좌측 메뉴에서 컴파일 버튼을 눌러준다.\n\n![Remix 좌측 메뉴](/assets/posts/blockchain/solidity/Solidity-02/01.png)\n\n- 그럼 아래와 같은 화면이 나온다.\n- 기본적인 설정은 둔 채 `CONTANCT`에서 컴파일할 계약을 선택한 후  컴파일 한다.\n\n![Remix 컴파일 페이지](/assets/posts/blockchain/solidity/Solidity-02/02.png)\n\n# 에러 테스트\n\n> e.g. `storeData`에 `;` 을 제거한 후 컴파일 해보자\n\n![;을 제거해보자](/assets/posts/blockchain/solidity/Solidity-02/03.png)\n\n\n- `Remix`에서 컴파일 했을 시에 결과 화면이다.\n![Remix 컴파일 이후](/assets/posts/blockchain/solidity/Solidity-02/04.png)\n\n\n- `line:21`에 에러 표시가 뜨지만 해당 `line`의 코드는 문제 없다.\n- 에러 메세지를 확인해보자\n- `;` 이 올걸 예상했지만 `function` 이 있다는 얘기다.\n- 이는 `line:18`에서 `;` 을 붙여야만 해당 구문이 끝났다고 이해를 하는데 예상치도 못한 코드가 이어졌기 때문이다.\n\n![파싱 에러](/assets/posts/blockchain/solidity/Solidity-02/05.png)\n\n\n# 해결\n\n- `line 21`에서 `;`을 추가 해주면 해결!\n![; 추가 이후 컴파일](/assets/posts/blockchain/solidity/Solidity-02/06.png)\n\n\n# 결론\n\n- 에러를 발생시키는 `line`이 아닌 그 다음 구문에서 에러를 띄워주기 때문에 혼란스러울 수 있다.\n- 에러를 띄워주는 `line` 이전 코드들을 확인해보는 습관을 들이자.\n\n#\n\n## 추가\n\n- 컴파일이 정상적으로 이루어 졌을 때, [SPDX 라이선스](https://en.wikipedia.org/wiki/Software_Package_Data_Exchange) 식별자를 추가하지 않았다는 경고문을 볼 수 있다.\n- 여기서는 테스트 이기 때문에 따로 라이선스 식별자는 필요하지 않다.\n\n![경고 문구](/assets/posts/blockchain/solidity/Solidity-02/07.png)\n\n#\n\n#### 피드백은 언제나 환영입니다.","path":"[Solidity] 02. Remix를 이용한 컴파일 및 디버깅"},{"data":{"title":"[Solidity] 01. Solidity 입문","date":"2022-08-28","tags":["TIL","Udemy","Blockchain","Solidity","Remix"],"draft":false,"summary":"Solidity 입문","mainCategory":"blockchain","subCategory":"solidity"},"content":"\n## Remix\n- `스마트 계약`을 개발, 배포, 관리할 수 있는 통합 개발 환경\n\n### 스마트 계약이란?\n- 두 계약 당사자 간에 이뤄지는 협의에 대한 자동화된 계약\n\n### 스마트 계약의 유용성\n- 새로운 시스템이 기존의 블록체인 네트워크를 활용할 수 있다.\n    - 자체 블록체인을 만드는 것에는 많은 리소스가 투입된다.\n    - `이더리움`과 같은 기존의 블록체인을 이용해서 `스마트 게약`을 통해 해당 블록체인을 활용\n\n\n## Solidity란?\n- `스마트 계약`의 작성과 구현 위한 객체 지향 프로그래밍 언어\n\n## 0. import solidity\n\n```solidity\n// 0.7.0 <= solidity <0.9.0; 를 의미\npragma solidity >=0.7.0 <0.9.0;\n```\n\n\n\n## 1. 변수\n\n- 값을 저장하기 위해 예약된 메모리 공간\n- `정수(integer)`, `문자열(string)`, `불리언(bool)`\n\n```solidity\n// 계약 정의\ncontract simpleStorage {\n    // type name = value;\n\tuint storeData = 23;\n\tstring names = 'jack';\n\tbool switchOn = true;\n}\n```\n\n## 2. 함수\n\n- 애플리케이션 어디에서나 사용할 수 있는 재사용이 가능한 코드 그룹\n- `arguments`에는 넘길 값과 함께 앞에 타입을 정해준다.\n```solidity\nfunction set(uint x) {\n    // variable = new value\n\tstoreData = x;\n};\n\n```\n\n## 3. public\n\n- `contract` 외부에서 호출 가능\n- 다른 `contract`에서도 `public`이 붙은 함수 호출 가능\n- 반대는 `private`\n\n```solidity\nfunction set(uint x) public {\n\tstoreData = x;\n};\n```\n\n## 4. view\n\n- `state`를 수정할 수 없다는 것을 알리는 전역 제어자(Global Modifier)\n- 오직 `read`만 가능\n\n```solidity\nfunction get() public view {\n\treturn storeData;\n}\n```\n\n## 4. returns\n\n- 함수 자체와 관련이 있다.\n- `storeData`를 반환하는 것이 아님\n- `contract`에 대한 `state`를 반환하게 해준다.\n- e.g. `returns (uint)` : `정수` 타입의 `state`를 `return`하겠다는 뜻\n\n```solidity\nfunction get() public view returns (uint) {\n\treturn storeData;\n}\n```\n\n#\n\n#### 피드백은 언제나 환영입니다.\n\n","path":"[Solidity] 01. Solidity 입문"}]},"__N_SSG":true}