{"pageProps":{"categories":[{"title":"blockchain","sub":[{"title":"DApp","count":1},{"title":"solidity","count":3}]},{"title":"tech","sub":[{"title":"refactoring","count":3},{"title":"typescript","count":1}]},{"title":"til","sub":[{"title":"AWS","count":1},{"title":"CS","count":1},{"title":"CSS","count":2},{"title":"Google Analytics 4","count":1},{"title":"javascript","count":3},{"title":"markdown","count":1},{"title":"programming","count":2},{"title":"react","count":2}]}],"data":[{"data":{"title":"@supports 파헤치기","date":"2022-09-06","tags":["TIL","CSS","@supports","feature query"],"draft":false,"summary":"@규칙 중 하나인 @supports에 대해 알아보자","mainCategory":"til","subCategory":"CSS"},"content":"\n# 서론\n\n- 브라우저 버전에 따라 `CSS`의 지원 여부가 달라진다.\n- 만약 해당 `CSS`를 지원하지 않을 경우 어떻게 해야할까?\n    1. 모든 브라우저, 버전을 지원하는 `CSS`로 재작성한다.\n    2. 부분적으로 지원하지 않는 경우에만 추가 작성을 한다.\n- 이번에 소개할 `CSS` 기능은 위 2번의 경우 사용할 수 있다.\n\n# @supports\n\n- 간단히 말해서 해당 조건에 따라 `CSS`를 적용하는 것이다.\n- `기능 쿼리`(feature query)라고 부른다.\n- 흔히 쓰는 미디어 쿼리(Media query)와 같은 [@규칙](https://developer.mozilla.org/ko/docs/Web/CSS/At-rule)이다\n- 스타일의 최상위 or 다른 @규칙과 중첩해서 사용 가능하다.\n\n## 기본적인 사용 방법\n\n- 브라우저가 `조건` 을 만족할 때 해당 `CSS`를 적용한다\n\n```css\n@supports (조건) {\n // 적용할 css\n}\n```\n\n> e.g. 브라우저가 `display: grid` 를 지원할 때 중괄호 안에 `CSS` 를 적용한다.\n\n```css\n@supports (display: grid) {\n\t// 적용할 CSS\n}\n```\n\n## 연산자와 함께 쓰는 경우\n\n- `not , and, or` 연산자와 같이 쓸 수 있다.\n\n### `not` 연산자\n\n> e.g. 브라우저가 `aspect-ratio: 16 / 9` 를 지원하지 않을 때 해당 `CSS` 를 적용한다.\n\n```css\n@supports not (aspect-ratio: 16 / 9) {\n\t// 적용할 CSS\n}\n```\n\n### `and` 연산자\n\n> e.g. 브라우저가 `display: grid` 와 `gap` 을 지원하는 경우 해당 `CSS` 를 적용한다.\n- 2개 이상의 조건을 걸 수 있다.\n\n```css\n@supports (display: grid) and (gap: 10px) {\n\t// 적용할 CSS\n}\n```\n\n### `or` 연산자\n\n> e.g. 브라우저가 여러 조건 중 하나의 조건이라도 지원(만족)하면 해당 `CSS` 를 적용한다.\n- 2개 이상의 조건을 걸 수 있다.\n\n```css\n@supports (display: flex) or (display: -webkit-box) or (display: -moz-box) or (display: -ms-flexbox) or (display: -webkit-flex) {\n\t// 적용할 CSS\n}\n```\n#\n\n### 주의 사항\n\n- `and` 와 `or` 을 혼합해서 사용할 경우 `()` 를 사용하여 적용 우선순위를 정해야 한다.\n\n#\n\n## `selector` 와 함께 쓰는 경우\n\n- 브라우저가 특정 선택자를 지원하는 지 판별한다.\n> e.g. 브라우저가 [자식 결합자](https://developer.mozilla.org/ko/docs/Web/CSS/Child_combinator)를 지원할 때 해당 `CSS` 를 적용한다\n\n```css\n@supports selector(A > B) {\n\t// 적용할 CSS\n}\n```\n\n### 참조\n\n[@supports - CSS: Cascading Style Sheets | MDN](https://developer.mozilla.org/ko/docs/Web/CSS/@supports)\n\n#### 피드백은 언제나 환영입니다.","path":"@supports 파헤치기"},{"data":{"title":"Solidity 03","date":"2022-09-04","tags":["TIL","Remix","Solidity","Deploy","Transaction"],"draft":false,"summary":"Remix를 이용해서 스마트 계약을 배포하고 트랙잭션 해보자","mainCategory":"blockchain","subCategory":"solidity"},"content":"\r\n# 서론\r\n- 계약을 작성했다면 배포하고 실제로 트랜잭션을 해보자.\r\n- [Solidity 01](https://jhlee0409.github.io/blockchain-solidity/article/Solidity-01)에서 작성한 기본적인 `contract`로 배포를 진행할 예정이다.\r\n\r\n\r\n# 스마트 계약 배포하기\r\n\r\n- 배포를 위해 `Remix` 좌측 메뉴에서 `Deploy & run transactions` 버튼을 클릭해준다.\r\n\r\n![Remix 좌측 메뉴](/assets/posts/blockchain/solidity/Solidity-03/01.png)\r\n\r\n## 설정하기\r\n- 배포 페이지에서는 아래와 같은 배포를 위한 설정을 할 수 있다.\r\n\r\n![배포 환경 설정](/assets/posts/blockchain/solidity/Solidity-03/02.png)\r\n\r\n#### 각 설정 설명\r\n- `ENVIRONMENT` : 배포할 환경 선택 / `VM = Virtual Machine`\r\n- `ACCOUNT` : 목록을 열어보면 여러 계정들이 있는데 전부 이더를 보내거나 스마트 계약과 트랜잭션을 위한 `테스트 계정`이다.\r\n- `GAS LIMIT` : 트랜잭션에 사용되는 가스비(수수료)의 최대치\r\n- `VALUE` : 계약이나 이더 전송 스마트 계약에 쓰이는 값을 설정한다. `ETH, WEI, GWE`는 `ml, l`와 같은 ETH의 단위\r\n- `CONTRACT` : 실행 및 배포할 계약을 선택\r\n\r\n## 배포하기\r\n- 배포 설정이 끝났다면 `Deploy`를 클릭한다.\r\n- 배포를 진행하면 콘솔 창에서 결과를 확인할 수 있다.\r\n\r\n![우측 Debug를 클릭하면 상세 정보를 확인할 수 있다.](/assets/posts/blockchain/solidity/Solidity-03/03.png)\r\n\r\n- 좌측에 성공 체크가 있으면 배포를 성공적으로 완료했다는 뜻이다.\r\n- `0x5B3…eddc` = 계정 주소\r\n- 해당 계정을 통해 스마트 계약을 블록체인에 업로드 했기 때문에 이더를 소모 (가스비)\r\n- 해당 계정에서 `simpleStorage` 를 배포했다는 것도 확인 가능\r\n- 이외에도 배포를 위해 설정했던 값들을 볼 수 있다.\r\n\r\n# 스마트 계약과 트랜잭션하기\r\n\r\n- 배포를 성공하고 나면 이제 트랜잭션이 가능하다. 바로 한번 해보자!\r\n\r\n## 배포 이후 추가된 정보 확인\r\n\r\n- 배포 이후 `배포 설정` 하단에 아래와 같은 부분이 생겨났을 것이다.\r\n- 배포한 스마트 계약(`simpleStorage`)이 보일 것이다.\r\n\r\n![배포 성공 이후 새로운 부분이 나타난다.](/assets/posts/blockchain/solidity/Solidity-03/04.png)\r\n![해당 계약 좌측에 화살표를 누르면 상세 정보를 볼 수 있다.](/assets/posts/blockchain/solidity/Solidity-03/05.png)\r\n\r\n- `set`과 `get`은 `simpleStorage` 계약에서 만든 `function`이다.\r\n- 해당 `function`은 `Remix IDE`에서 사용할 수 있게 된다.\r\n- 따라서 데이터를 저장하고 가져오는 것이 가능하다. (`set`과 `get`을 만들었으니)\r\n\r\n## `set()` 트랜잭션 실행하기\r\n\r\n> e.g. `set`에 `68`을 입력하고 `set 버튼`을 누르면 트랜잭션이 일어난다.\r\n\r\n![set에 68을 입력한다.](/assets/posts/blockchain/solidity/Solidity-03/06.png)\r\n![트랙잭션 결과는 콘솔 창에서 확인 가능하다.](/assets/posts/blockchain/solidity/Solidity-03/07.png)\r\n![우측 화살표를 누르면 상세 정보 확인 가능하다.](/assets/posts/blockchain/solidity/Solidity-03/08.png)\r\n\r\n- 트랜잭션이 발생할 때마다 가스비가 발생한다.\r\n- 트랜잭션이 어느 계정에서 발생했는지 알 수 있다. (`from`)\r\n- 스마트 계약의 주소도 확인 가능하다. (`to`)\r\n\r\n## `get()` 트랜잭션 실행하기\r\n\r\n- `set`을 이용해 데이터를 저장했다면 당연 `get`을 이용해 저장한 데이터를 불러올 수 있다.\r\n- `get`버튼을 누르면 바로 트랜잭션이 일어난다.\r\n- 저장한 데이터를 불러오는 것은 거래가 발생하는 것이 아니기에 가스비가 발생하지 않는다.\r\n\r\n![get을 누르면 set에서 입력한 68을 반환한다.](/assets/posts/blockchain/solidity/Solidity-03/09.png)\r\n![콘솔 창에서 결과를 확인 할 수 있다.](/assets/posts/blockchain/solidity/Solidity-03/10.png)\r\n\r\n# 결론\r\n\r\n- 모든 트랜잭션은 블록체인에 기록된다.\r\n- 이로써 `DApp`에서 블록체인 개발에 필요한 기본적인 내용을 학습했다.\r\n\r\n#\r\n\r\n### 참조\r\n\r\n[remix Deploy & Run](https://remix-ide.readthedocs.io/en/latest/run.html)\r\n\r\n#\r\n\r\n#### 피드백은 언제나 환영입니다.","path":"Solidity 03"},{"data":{"title":"단항 더하기 연산자 (Unary + Operator)","date":"2022-09-04","tags":["TIL","Javascript","단항 더하기 (Unary + Operator)","단항 부정 연산자 (Unary - Operator)"],"draft":false,"summary":"단항 더하기 (Unary + Operator)와 단항 부정 연산자 (Unary - Operator)에 대해 알아보자","mainCategory":"til","subCategory":"javascript"},"content":"# 단항 더하기 연산자 (Unary + Operator)\r\n- `단항 더하기 연산자 (Unary + Operator)`는 피연산자를 숫자 유형으로 변환합니다.\r\n- 피연산자에 어떠한 영향도 주지 않으며 음수를 양수로 만들지도 않는다.\r\n- 숫자 타입이 아닌 피연산자에게는 피연산자를 숫자 타입으로 변환하여 반환한다.\r\n- 이 때는 피연산자를 변경하는 것이 아닌 숫자 타입으로 변환한 값을 생성해서 반환한다.\r\n\r\n```javascript\r\n    console.log(+\"10\"); // 10\r\n\r\n    console.log(+\"\"); // 0\r\n\r\n    console.log(+\"Le Jack\"); // NaN (Not a Number)\r\n\r\n    console.log(+undefined); // NaN (Not a Number)\r\n\r\n    console.log(+true); // 1\r\n\r\n    console.log(+false); // 0\r\n\r\n    console.log(+null); // 0\r\n\r\n    console.log(+1n); // Uncaught TypeError: BigInt를 숫자로 변환할 수 없다.\r\n```\r\n\r\n# 단항 부정 연산자 (Unary - Operator)\r\n- `단항 부정 연산자 (Unary - Operator)`는 피연산자의 부호를 반전한 값을 반환한다.\r\n- 나머지 특성은 `단항 더하기 연산자`와 같다.\r\n\r\n```javascript\r\n    console.log(-\"10\"); // -10\r\n\r\n    console.log(-\"\"); // -0\r\n\r\n    console.log(-\"Le Jack\"); // NaN (Not a Number)\r\n\r\n    console.log(-undefined); // NaN (Not a Number)\r\n\r\n    console.log(-true); // -1\r\n\r\n    console.log(-false); // -0\r\n\r\n    console.log(-null); // -0\r\n\r\n    console.log(-1n); // Uncaught TypeError: BigInt를 숫자로 변환할 수 없다.\r\n```\r\n\r\n#\r\n\r\n#### 피드백은 언제나 환영입니다.","path":"단항 더하기 연산자 (Unary + Operator)"},{"data":{"title":"Solidity 02","date":"2022-09-03","tags":["TIL","Remix","Solidity","Compile","Debugging"],"draft":false,"summary":"Remix를 이용해서 컴파일 & 디버깅 해보자","mainCategory":"blockchain","subCategory":"solidity"},"content":"\n# 서론\n\n- `Solidity`는 구문이 끝나면 `;` 을 붙여주어야한다.\n- 붙이지 않고 컴파일 할 시 어떤 에러를 띄워주는지 알아보자.\n\n# 컴파일 하기\n\n- `Remix` 좌측 메뉴에서 컴파일 버튼을 눌러준다.\n\n![Remix 좌측 메뉴](/assets/posts/blockchain/solidity/Solidity-02/01.png)\n\n- 그럼 아래와 같은 화면이 나온다.\n- 기본적인 설정은 둔 채 `CONTANCT`에서 컴파일할 계약을 선택한 후  컴파일 한다.\n\n![Remix 컴파일 페이지](/assets/posts/blockchain/solidity/Solidity-02/02.png)\n\n# 에러 테스트\n\n> e.g. `storeData`에 `;` 을 제거한 후 컴파일 해보자\n\n![;을 제거해보자](/assets/posts/blockchain/solidity/Solidity-02/03.png)\n\n\n- `Remix`에서 컴파일 했을 시에 결과 화면이다.\n![Remix 컴파일 이후](/assets/posts/blockchain/solidity/Solidity-02/04.png)\n\n\n- `line:21`에 에러 표시가 뜨지만 해당 `line`의 코드는 문제 없다.\n- 에러 메세지를 확인해보자\n- `;` 이 올걸 예상했지만 `function` 이 있다는 얘기다.\n- 이는 `line:18`에서 `;` 을 붙여야만 해당 구문이 끝났다고 이해를 하는데 예상치도 못한 코드가 이어졌기 때문이다.\n\n![파싱 에러](/assets/posts/blockchain/solidity/Solidity-02/05.png)\n\n\n# 해결\n\n- `line 21`에서 `;`을 추가 해주면 해결!\n![; 추가 이후 컴파일](/assets/posts/blockchain/solidity/Solidity-02/06.png)\n\n\n# 결론\n\n- 에러를 발생시키는 `line`이 아닌 그 다음 구문에서 에러를 띄워주기 때문에 혼란스러울 수 있다.\n- 에러를 띄워주는 `line` 이전 코드들을 확인해보는 습관을 들이자.\n\n#\n\n## 추가\n\n- 컴파일이 정상적으로 이루어 졌을 때, [SPDX 라이선스](https://en.wikipedia.org/wiki/Software_Package_Data_Exchange) 식별자를 추가하지 않았다는 경고문을 볼 수 있다.\n- 여기서는 테스트 이기 때문에 따로 라이선스 식별자는 필요하지 않다.\n\n![경고 문구](/assets/posts/blockchain/solidity/Solidity-02/07.png)\n\n#\n\n#### 피드백은 언제나 환영입니다.","path":"Solidity 02"},{"data":{"title":"AWS CodeBuild Webhook 이벤트 설정하기","date":"2022-09-02","tags":["TIL","AWS","CodeBuild","Webhook 이벤트"],"draft":false,"summary":"특정 레포지토리에 특정 이벤트가 일어났을 때만 자동으로 빌드 시작하기","mainCategory":"til","subCategory":"AWS"},"content":"\n# 서론\n\n- `AWS CodeBuild`를 사용하다보면 특정 상황에서만 동작하도록 설정해야할 때가 있다.\ne.g. `master branch`에 `merge`가 되었을 때 빌드 시작\n- `AWS CodeBuild`의 간단한 설정 만으로 해당 기능을 구현할 수 있다.\n- 소스 코드의 변경을 자동적으로 감지하고 특정 상황에서만 빌드 트리거가 발생하도록 설정해보겠다.\n\n- 이미 `AWS CodeBuild`의 빌드 프로젝트가 생성되어 있다고 가정하겠다.\n- `AWS CodeBuild`의 설명과 생성 프로세스는 추후 포스팅해서 다루도록 하겠다.\n\n# 설정 프로세스\n\n## 1.  특정 빌드 프로젝트로 이동\n\n![빌드 프로젝트 설정](/assets/posts/til/AWS/AWS-CodeBuild-Webhook-이벤트-설정하기/00.png)\n\n## 2. 우측 상단 `편집` 클릭 후 `소스`클릭\n\n![편집 -> 소스 클릭](/assets/posts/til/AWS/AWS-CodeBuild-Webhook-이벤트-설정하기/01.png)\n\n\n## 3. WebHook 이벤트 활성화\n\n### 3-1 아래의 체크 박스를 클릭하면 설정 가능한 항목들이 나타난다.\n\n![Webhook 활성화](/assets/posts/til/AWS/AWS-CodeBuild-Webhook-이벤트-설정하기/02.png)\n\n\n### 3-2 우리가 이번에 설정할 항목들은 아래와 같다.\n\n1. `이벤트 유형` 설정\n2. `HEAD_REF`와 `BASE_REF` 설정\n\n![Webhook 항목 선택](/assets/posts/til/AWS/AWS-CodeBuild-Webhook-이벤트-설정하기/03.png)\n\n\n### 3-3 이벤트 유형 클릭 시 아래와 같은 4가지 선택사항이 있다. (중복 선택 가능)\n\n- `PUSH` : 해당 소스 코드의 branch 상관없이 Push가 일어나면 자동으로 빌드 시작\n- `PULL_REQUEST_CREATED` : 풀 리퀘스트가 생성되었을 때 자동으로 빌드 시작\n- `PULL_REQUEST_UPDATED` : 풀 리퀘스트가 업데이트 되었을 때 자동으로 빌드 시작\n- `PULL_REQUEST_MERGED` : 생성된 풀 리퀘스트가 병합을 완료했을 때 자동으로 빌드시작\n\n![이벤트 유형 선택](/assets/posts/til/AWS/AWS-CodeBuild-Webhook-이벤트-설정하기/04.png)\n\n### 3-4 특정 조건 생성하기\n\n- `HEAD_REF` : 출발점\n- `BASE_REF` : 도착점\n- e.g. 만약 위에서 `PULL_REQUEST_MERGED`만 선택했을 경우\n    - `dev(HEAD_REF) branch`  에서 `main(BASE_REF) branch` 로 풀 리퀘스트가 생성되고 병합이 완료되었을 때 빌드 시작\n- `BASE_REF`와 `HEAD_REF`에는 `정규식`을 입력해야하는 데 `^refs/heads/${브랜치 이름}$` 으로 입력해두면 일치하는 브랜치를 `참조`한다.\n- `BASE_REF` 의 경우 PULL 요청에서만 작동한다.\n\n![추가 조건 설정](/assets/posts/til/AWS/AWS-CodeBuild-Webhook-이벤트-설정하기/05.png)\n\n### 3-5 특정 조건 완성\n\n- 아래와 같은 조건으로 설정했다면 `dev → main` 으로 생성된 `풀 리퀘스트`가 `병합이 완료`되면 빌드를 자동으로 시작\n\n![Webhook 설정 완료](/assets/posts/til/AWS/AWS-CodeBuild-Webhook-이벤트-설정하기/06.png)\n\n### 3-6 설정 업데이트\n\n- `소스 업데이트` 클릭하면 설정 완료\n\n![업데이트 선택](/assets/posts/til/AWS/AWS-CodeBuild-Webhook-이벤트-설정하기/07.png)\n\n#\n\n### 참조\n\n[WebhookFilter](https://docs.aws.amazon.com/codebuild/latest/APIReference/API_WebhookFilter.html)\n\n#\n\n#### 피드백은 언제나 환영입니다.","path":"AWS CodeBuild Webhook 이벤트 설정하기"}]},"__N_SSG":true}