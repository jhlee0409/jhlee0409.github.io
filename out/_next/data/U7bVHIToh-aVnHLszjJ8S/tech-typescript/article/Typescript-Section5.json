{"pageProps":{"categories":[{"title":"tech","sub":[{"title":"refactoring","count":3},{"title":"typescript","count":1}]},{"title":"til","sub":[]}],"data":{"title":"Typescript Section5","date":"2022-04-01","tags":["TIL","TypeScript","Udemy"],"draft":false,"summary":"Section 5 클래스 & 인터페이스"},"content":"\n# Section 5 : 클래스 & 인터페이스\n\n## 57. 모듈 소개\n\n## 58. 클래스란무엇인가\n\n## 59. 퍼스트 클래스 만들기\n\n## 60. 자바스크립트로 컴파일하기\n\n## 61. 생성자 함수 및 “this” 키워드\n\n## 62. 개인 및 “공용” 액세스 수정자\n\n## 63. 약식 초기화\n\n## 64. “읽기전용” 속성\n\n## 65. 상속\n\n- **KEYWORD : class** ExtraClass **extends** BaseClass **{…}**\n- 공통적인 기능을 공유하면서 특수화된 청사진을 생성할 수 있다.\n- 기본 클래스를 설정한 다음 이를 상속하는 특수화된 클래스 생성 가능\n\n## 66. 속성 및 “보호된” 수정자 재정의\n\n## 67. 게터 & 세터\n\n## 68. 정적 메서드 & 속성\n\n- 정적 메소드 : 클래스를 기반으로 생성된 객첵 X ⇒ 클래스에서 직접 호출하드 메소드\n\n## 69. 추상클래스\n\n- **KEYWORD : abstract Class & (private method or private property)**\n- 상속 받는 클래스에서 abstract를 매긴 메소드가 필히 구현되어야할 때 정의\n- 공통 메소드 or 속성을 공유하도록 하려는 경우 유용\n- abstract할 메소드와 해당 메소드가 속한 클래스 앞에 abstract 추가\n- abstract 메소드에는 리턴타입도 명시\n- 추상 클래스는 기본적으로 상속되어야 할 클래스일 뿐\n- 인스턴스화 할 수 없고 확정되어야 한다.\n\n```tsx\nabstract Class Sample {\n\tabstract value:number = 0; //property\n\tabstract Add(): void; //method\n}\n```\n\n## 70. 싱글톤 & 개인 생성자\n\n1. 싱글톤\n\n   - **KEYWORD : private constructor**\n   - 특정 클래스의 인스턴스를 정확히 하나만 갖도록 한다\n   - “new”로 생성하지 않고 메소드를 호출하여 구성 ⇒ 특정 시점에 반드시 하나의 클래스 인스턴스가 존재한다.\n   - 정적 메소드 or 속성을 사용할 수 없거나 사용하지 않고자 하는 동시에 클래스를 기반으로 여러 객체를 만들 수는 없지만 항상 클래스를 기반으로 정확히 하나의 객체만 가질 수 있도록 하고자 하는 경우에 유용\n\n   ```tsx\n   class OnlyOne {\n     private constructor() {}\n     private static instance: OnlyOne;\n     //! SOLUTION\n     // 인스턴스를 가지고 있다면 이를 반환 아니면 새 인스턴스 생성\n     static getInstance() {\n       if (OnlyOne.instance) {\n         return this.instance;\n       }\n       this.instance = new OnlyOne();\n       return this.instance;\n     }\n   }\n\n   //! ERROR\n   const one = new OnlyOne();\n\n   //! RESULT\n   const one = OnlyOne.getInstance();\n   const one2 = OnlyOne.getInstance();\n   ```\n\n## 71. 클래스 - 요약\n\n## 72. 인터페이스\n\n- **KEYWORD : interface**\n- 객체의 구조를 설명한다.\n- 초기값 할당 불가, 구체적인 값X, 구조만 있을 뿐\n- 해당 인터페이스의 구조를 가져야 하는 객체의 타입을 확인하는 타입으로 사용\n\n```tsx\ninterface Person {\n  name: string;\n  age: number; //age: number = 15; !ERROR 값 할당 시\n  greet(phase: string): void; // return nothing!\n}\n\nlet user1: Person;\n\n// 인터페이스의 정의를 충족하는 올바른 객체\nuser1 = {\n  name: \"Lee\",\n  age: 27,\n  greet(phrse: string) {\n    consle.log(phrase + \" \" + thi.name);\n  },\n};\n\nuser1.greet(\"Hi there - I am\");\n// result => Hi there - I am Lee\n```\n\n## 73. 클래스와 인터페이스 사용하기\n\n- **KEYWORD :** **Class** Sample **implements** TestInterface {}\n- What is different between type and interface\n  1. 인터페이스는 객체의 구조를 설명하기 위해서만 사용한다는 것이다.\n  2. 이 경우에도 타입 사용은 가능하지만\n     사용자 정의 타입 대신 유니온 타입 등을 저장할 수도 있다.\n  3. 인터페이스를 자주 사용하는 이유\n     - 클래스가 인터페이스를 이행하고 준수해야 하는 약속처럼 사용할 수 있기 때문\n- 상속은 한 클래스로부터만 상속할 수 있지만 인터페이스는 “,”로 구분하여 여러개 구현 가능\n- 인터페이스는 주로 구체적인 구현이 아닌 서로 다른 클래스 간의 기능을 공유하기 위해 사용됨\n- 인터페이스 내 ⇒ 구현 or 값을 입력하는 게 아닌 ⇒ 구조와 클래스가 가져야할 기능을 입력\n- 추상 클래스로 작업하는 것과 다소 비슷\n  - 인터페이스 ⇒ 구현 세부 사항이 전혀 없다\n  - 추상 클래스 ⇒ 덮어써야 했던 부분과 본인이 수행한 구체적 구현 부분을 혼합할 수 있다.\n- 인터페이스를 어떤 상수나 변수의 타입으로 사용하여 인터페이스 타입을 기반으로 하는 다른 타입의 다른 클래스를 저장할 수 있다. ⇒ inplements 덕분\n\n```tsx\ninterface Greetable {\n  name: string;\n  greet(phase: string): void; // return nothing!\n}\n\n// extends(상속)와 달리 여러 개의 인터페이스 적용 가능 / \",\"로 구분하여 추가\nclass Person implements Greetable, Sample {\n  name: string;\n  age = 30; // 추가 가능\n  constructor(n: string) {\n    this.name = n;\n  }\n\n  greet(phase: string) {\n    consle.log(phrase + \" \" + thi.name);\n  }\n}\n// Greetable 타입도 가능하고 Person 타입으로도 지정 가능\n// Why? Person 객체도 결국 Greetable 인터페이스에 기반한 것이기 때문\nlet user1: Greetable;\n\nuser1 = new Person(\"Lee\");\nuser1.greet(\"Hi there - I am\");\n// result => Hi there - I am Lee\n```\n\n## 74. 왜 인터페이스인가\n\n- 메소드의 경우\n  - 인터페이스에 해당 메소드를 정의해두면\n  - implements하는 모든 클래스들이 인터페이스 내의 메소드를 구현하게 해야할 경우\n- 인터페이스를 사용하여 특정 구조를 구현\n-\n\n```tsx\n// user1에 무엇을 저장하는 Greetable이어야하고\n// 객체나 클래스에 대한 모든 것을 알 필요가 없는 강력하고 유연한  코드를 작성할 수 있지만\n// user1에는 greet 메소드가 있어야 한다는 것은 알 수 있다.\nlet user1: Greetable;\n// Person이 여기서 무엇을 갖고 있든 상관없다. greet만 관건\nuser1 = new Person(\"Lee\");\nuser1.greet(\"Hi there - I am\");\n```\n\n## 75. 읽기 전용 인터페이스 속성\n\n- **KEYWORD : readonly in interface**\n- public, private 등은 지정할 수 없다.\n- readonly를 추가 ⇒ 인터페이스를 기반으로 구축하는 모든 객체의 property가 한 번만 설정 ⇒ 이후 읽기 전용으로 설정 ⇒ 객체가 초기화되면 변경할 수 없도록 할 수 있다.\n\n```tsx\ninterface Greetable {\n\treadonly name: string;\n\tgreet(phase: string): void; // return nothing!\n}\n\nclass Person implements Greetable, Sample {\n// 클래스 내에서 readonly를 지정하지 않아도 Greetable을 구현해야하는 것을 인지\n// => name이 읽기 전용임을 자동으로 추론하기 떄문\n// Why? 인터페이스 안에서 그렇게 설정했기 때문\n\tname: string;\n\t ...\n}\n\nlet user1: Greetable ;\nuser1 = new Person('Lee')\n//! ERROR 일기 전용이기 때문, 처음에만 셋업\nuser1.name = 'Kim'\n```\n\n## 76. 인터페이스 확장하기\n"},"__N_SSG":true}