{"pageProps":{"categories":[{"title":"blockchain","sub":[{"title":"DApp","count":1},{"title":"solidity","count":4}]},{"title":"tech","sub":[{"title":"refactoring","count":3},{"title":"typescript","count":1}]},{"title":"til","sub":[{"title":"AWS","count":1},{"title":"CS","count":1},{"title":"CSS","count":2},{"title":"Google Analytics 4","count":1},{"title":"HTML","count":1},{"title":"javascript","count":4},{"title":"markdown","count":1},{"title":"Next.js","count":1},{"title":"programming","count":2},{"title":"react","count":2}]}],"data":[{"data":{"title":"[Next.js] Page Extensions","date":"2022-09-13","tags":["TIL","Next.js","next.config.js","pageExtensions"],"draft":false,"summary":"next.config.js 파일의 page extensions 옵션을 커스텀해보자","mainCategory":"til","subCategory":"Next.js"},"content":"\r\n\r\n# 서론\r\n\r\n- 작업을 하다보면 임시적으로 접근을 제한하여야 하는 파일들이 있을 수 있다.\r\n- 폴더 최상위에 존재하는 `next.config.js`의 `pageExtensions`을 통해 `page`디렉토리 내 파일들을 대상으로 확장자명에 따라서 파일의 접근을 막을 수 있다.\r\n- `pageExtensions`의 규칙을 따르지 않은 파일에 대해서는 접근시 `404 (Not Found)`에러를 반환한다.\r\n\r\n#### default pageExtensions\r\n```jsx\r\nmodule.exports = {\r\n  pageExtensions: ['jsx', 'js', 'tsx', 'ts'],\r\n}\r\n```\r\n\r\n\r\n# 사용법\r\n> e.g. `page.` prefix를 붙일 시\r\n```jsx\r\nmodule.exports = {\r\n  pageExtensions: ['page.tsx', 'page.ts', 'page.jsx', 'page.js'],\r\n}\r\n```\r\n- 위와 같이 확장자명을 설정한다면 `pages` 디렉토리 내에 포함하고자 하는 파일의 확장자명에 전부 `page.`을 붙여야한다.\r\n- `_document`, `_app` 그리고 `pages/api`내에 있는 파일에도 동일하게 적용시켜 주어야한다.\r\n\r\n## 현재 디렉토리 구조\r\n```text\r\n└─ pages\r\n    ├─ _app.page.tsx\r\n    ├─ _document.page.tsx\r\n    ├─ home\r\n    │  └─ main.page.tsx\r\n    │  └─ exclude.tsx  // 제외\r\n    └─ main.page.tsx\r\n```\r\n#\r\n### 빌드시\r\n```text\r\nPage\r\n┌ ● /\r\n├   /_app\r\n├ ○ /404\r\n└ ● /home/main\r\n```\r\n#\r\n### `exclude.page.tsx`로 확장자명 변경후 재빌드시\r\n```text\r\nPage\r\n┌ ● /\r\n├   /_app\r\n├ ○ /404\r\n├ ● /home/exclude\r\n└ ● /home/main\r\n```\r\n\r\n\r\n#\r\n\r\n### 참고\r\n- [Custom Page Extensions](https://nextjs.org/docs/api-reference/next.config.js/custom-page-extensions#including-non-page-files-in-the-pages-directory)\r\n\r\n#\r\n\r\n#### 피드백은 언제나 환영입니다.","path":"[Next.js] Page Extensions"},{"data":{"title":"[Solidity] 04. Solidity 용어","date":"2022-09-12","tags":["TIL","Solidity","Address","Mapping","Variables","Modifier","Constructor"],"draft":false,"summary":"Solidity에서 주로 사용되는 용어를 알아보자","mainCategory":"blockchain","subCategory":"solidity"},"content":"\n## Address 주소\n\n- `20 byte` 형식의 변수 타입\n- 주소로 선언한 변수는 이더리움 주소가 되도록 설정한다.\n\n```solidity\naddress wallet\naddress payable[] wallets\n```\n\n## Mapping 매핑\n\n- 값에 대한 참조를 가진다.\n- 키-값 쌍으로 구성된 해시 테이블을 생성 (키-값을 쌍으로 저장)\n- 각 키를 추적할 수 있도록 테이블을 만든다.\n\n```solidity\nmapping(_KeyType => _ValueType)\n\n// 주소를 정수에 매핑\nmapping(address => uint) public balances;\n```\n\n![출처: 참조 링크로!, [Mappings in Solidity Explained in Under Two Minutes]](https://miro.medium.com/max/429/1*H415ldFYnS2aRTx1YIQiKg.png)\n\n\n## Scope of Variables 변수의 범위\n\n- `State Variables` (상태 변수)\n    - 값이 계약 저장소(contract storage)에 영구적으로 저장되는 변수입니다.\n    - 계약 저장소로 가도록 선언된 변수 = 상태 변수\n    - 모든 함수와 계약에서 접근 가능\n    - 변수로 선언된 것\n- `Local Variables` (지역 변수)\n    - 해당 함수 안에서 선언된 변수\n    - 선언된 함수 안에서만 접근 가능\n\n```solidity\ncontract TestStroage {\n\tuint balance;  // state variable\n\n\tfunction set(uint x) public {\n\t\tstring value = 'data'; // local variable\n\t}\n}\n```\n\n- Global Variables (전역 변수)\n    - `global namespace(전역 네임스페이스)`에 존재하는 특수 변수\n    - 블록체인에 존재하는 정보를 가져올 때 이 변수를 사용\n\n![전역 변수들](/assets/posts/blockchain/solidity/Solidity-04-Solidity-용어/01.png)\n\n## Modifier 제어자\n\n- 함수의 실행을 제어하거나 수정할 수 있게 해준다.\n\n```solidity\ncontract Test {\n\taddress testAddress;\n\tconstructor() {\n\t\ttestAddress = msg.sender;\n\t}\n\t\n\t// testAddress 와 mag.sender가 일치하는 경우에만 함수 실행\n    // 다양한 조건들을 걸 수 있다.\n\tmodifier onlyOwner {\n\t\tif (msg.sender == testrAddress) {\n\t\t\t_; // keep going!\n\t\t}\n\t}\n\t// 사용법\n    // onlyOwner의 조건을 만족하는 경우에만 함수 실행\n\tfunction testFn() public onlyOwner {\n\t\t// ...\n\t}\n}\n```\n\n## Constructor 생성자\n\n- `constructor`는 `constructor` 키워드를 사용하여 선언된 함수이다.\n- 계약 생성 시에만 실행됩니다.\n- `constructor`를 작성하지 않는 경우 `contract`는 기본 생성자로 간주됩니다.\n\n```solidity\ncontract Test {\n\taddress testAddress;\n\n\tconstructor() {\n\t\ttestAddress = msg.sender;\n\t}\n}\n```\n\n#\n\n### 참조\n\n- [Solidity - Variables](https://www.tutorialspoint.com/solidity/solidity_variables.htm)\n- [Mappings in Solidity Explained in Under Two Minutes](https://medium.com/upstate-interactive/mappings-in-solidity-explained-in-under-two-minutes-ecba88aff96e)\n\n#\n\n#### 피드백은 언제나 환영입니다.","path":"[Solidity] 04. Solidity 용어"},{"data":{"title":"AbortController 파헤치기","date":"2022-09-09","tags":["TIL","Javascript","AbortController","signal","abort()"],"draft":false,"summary":"AbortController 통해 API 요청을 취소해보자","mainCategory":"til","subCategory":"javascript"},"content":"\r\n# AbortController란?\r\n\r\n- 하나 이상의 웹 요청을 취소할 수 있게 해준다.\r\n- `new` 키워드를 이용해 `AbortController` 객체 인스턴스를 생성한다.\r\n\r\n\r\n# AbortController 구성요소\r\n\r\n- `AbortController.signal` : DOM 요청과 통신하기 위한 객체\r\n- `AbortController.abort()`: DOM 요청이 완료되기 전에 취소한다.\r\n    - 호출시 `catch`문으로 바로 넘어간다\r\n    - `abort()` 통해 취소하면 `network status`에 상태코드가 아닌 `canceled`라고 뜬다.\r\n    - 이벤트리스너를 통해서 `abort()` 호출 가능\r\n## `abort()` 호출 시점에 따른 차이\r\n\r\n1. API 요청 전\r\n    - occur error : `AbortError: Failed to execute 'fetch' on 'Window': The user aborted a request`.\r\n2. API 요청 성공 시점\r\n    - `abort()` 메소드 무시하고 정상 진행\r\n3. API 요청 끝난 후\r\n    - occur error : `AbortError: The user aborted a request.`\r\n4. `finally()` 메소드 호출 시점\r\n    - `abort()` 메소드 무시하고 정상 진행\r\n\r\n# 사용법\r\n- API 호출 시 `option`에 `signal`객체 추가\r\n- API 요청 끝난 후 `abort()` 호출\r\n\r\n## fetch 사용시\r\n```javascript\r\nconst controller = new AbortController();\r\n\r\nfetch('/foo/bar', {\r\n    signal: controller.signal\r\n })\r\n  .then((res) => res.json())\r\n  .then((data) => {\r\n    console.log(data);\r\n  })\r\n  .catch((err) => console.log(\"err: \" + err))\r\n    // log => \"err: AbortError: The user aborted a request.\"\r\n\r\n// 요청 취소\r\ncontroller.abort();\r\n```\r\n\r\n## axios 사용시\r\n```javascript\r\nconst controller = new AbortController();\r\n\r\naxios.get('/foo/bar', {\r\n   signal: controller.signal\r\n}).then((res) => {\r\n   //...\r\n})\r\n.catch((err) => console.log(\"err: \" + err));\r\n    // log => \"err: AbortError: The user aborted a request.\"\r\n\r\n// 요청 취소\r\ncontroller.abort()\r\n```\r\n\r\n#\r\n### 참조\r\n\r\n- [AbortController](https://developer.mozilla.org/ko/docs/Web/API/AbortController)\r\n- [Cancellation | Axios Docs](https://axios-http.com/docs/cancellation)\r\n#\r\n\r\n#### 피드백은 언제나 환영입니다.","path":"AbortController 파헤치기"},{"data":{"title":"HTML Elements 파헤치기","date":"2022-09-08","tags":["TIL","HTML","Element","Tag","Attribute"],"draft":false,"summary":"HTML Elememts에 대해 알아보자","mainCategory":"til","subCategory":"HTML"},"content":"# HTML Element란?\n\n- 웹 페이지를 나타내기 위한 `HTML`의 구성 요소이다.\n- `Start tag` 부터 시작해서 `End tag` 를 포함한 전부를 나타낸다.\n\n# HTML Element 구성\n\n![HTML Element의 구성 요소](/assets/posts/til/HTML/HTML-Elements-파헤치기/01.png)\n\n1. 각 `Tag name` 이 가지고 있는 의미가 있다.\n2. `Tag name` 은 대소문자를 구분하지 않지만 `W3C`에서는 `소문자`를 권장하고 있으며 `XHTML`과 같은 더 엄격한 문서에서는 `소문자`를 요구한다.\n3. `Attribute(속성)` 은 각 `Element` 의 `Start Tag` 에 입력하며 `Element`마다 가지고 있는 고유의 속성과 공통적인 속성이 있으며, 각 `Element` 의 추가적인 정보를 제공한다.\n4. `Content` 는 `Element` 별로 있을 수도 없을 수도 있다.\n5. 필히 `Element` 는 `Start tag` 로 시작해서 `End tag` 로 끝을 맺어줘야 한다.\n6. `Element` 는 중첩이 가능하다.\n\n\n\n## HTML Elements 모음\n\n[코딩교육 티씨피스쿨](http://www.tcpschool.com/html-tags/intro)\n\n#\n\n### 참조\n\n- [HTML Elements](https://www.w3schools.com/html/html_elements.asp)\n\n- [HTML Attributes](https://www.w3schools.com/html/html_attributes.asp)\n\n#\n\n#### 피드백은 언제나 환영입니다.","path":"HTML Elements 파헤치기"},{"data":{"title":"@supports 파헤치기","date":"2022-09-06","tags":["TIL","CSS","@supports","feature query"],"draft":false,"summary":"@규칙 중 하나인 @supports에 대해 알아보자","mainCategory":"til","subCategory":"CSS"},"content":"\n# 서론\n\n- 브라우저 버전에 따라 `CSS`의 지원 여부가 달라진다.\n- 만약 해당 `CSS`를 지원하지 않을 경우 어떻게 해야할까?\n    1. 모든 브라우저, 버전을 지원하는 `CSS`로 재작성한다.\n    2. 부분적으로 지원하지 않는 경우에만 추가 작성을 한다.\n- 이번에 소개할 `CSS` 기능은 위 2번의 경우 사용할 수 있다.\n\n# @supports\n\n- 간단히 말해서 해당 조건에 따라 `CSS`를 적용하는 것이다.\n- `기능 쿼리`(feature query)라고 부른다.\n- 흔히 쓰는 미디어 쿼리(Media query)와 같은 [@규칙](https://developer.mozilla.org/ko/docs/Web/CSS/At-rule)이다\n- 스타일의 최상위 or 다른 @규칙과 중첩해서 사용 가능하다.\n\n## 기본적인 사용 방법\n\n- 브라우저가 `조건` 을 만족할 때 해당 `CSS`를 적용한다\n\n```css\n@supports (조건) {\n // 적용할 css\n}\n```\n\n> e.g. 브라우저가 `display: grid` 를 지원할 때 중괄호 안에 `CSS` 를 적용한다.\n\n```css\n@supports (display: grid) {\n\t// 적용할 CSS\n}\n```\n\n## 연산자와 함께 쓰는 경우\n\n- `not , and, or` 연산자와 같이 쓸 수 있다.\n\n### `not` 연산자\n\n> e.g. 브라우저가 `aspect-ratio: 16 / 9` 를 지원하지 않을 때 해당 `CSS` 를 적용한다.\n\n```css\n@supports not (aspect-ratio: 16 / 9) {\n\t// 적용할 CSS\n}\n```\n\n### `and` 연산자\n\n> e.g. 브라우저가 `display: grid` 와 `gap` 을 지원하는 경우 해당 `CSS` 를 적용한다.\n- 2개 이상의 조건을 걸 수 있다.\n\n```css\n@supports (display: grid) and (gap: 10px) {\n\t// 적용할 CSS\n}\n```\n\n### `or` 연산자\n\n> e.g. 브라우저가 여러 조건 중 하나의 조건이라도 지원(만족)하면 해당 `CSS` 를 적용한다.\n- 2개 이상의 조건을 걸 수 있다.\n\n```css\n@supports (display: flex) or (display: -webkit-box) or (display: -moz-box) or (display: -ms-flexbox) or (display: -webkit-flex) {\n\t// 적용할 CSS\n}\n```\n#\n\n### 주의 사항\n\n- `and` 와 `or` 을 혼합해서 사용할 경우 `()` 를 사용하여 적용 우선순위를 정해야 한다.\n\n#\n\n## `selector` 와 함께 쓰는 경우\n\n- 브라우저가 특정 선택자를 지원하는 지 판별한다.\n> e.g. 브라우저가 [자식 결합자](https://developer.mozilla.org/ko/docs/Web/CSS/Child_combinator)를 지원할 때 해당 `CSS` 를 적용한다\n\n```css\n@supports selector(A > B) {\n\t// 적용할 CSS\n}\n```\n\n### 참조\n\n[@supports - CSS: Cascading Style Sheets | MDN](https://developer.mozilla.org/ko/docs/Web/CSS/@supports)\n\n#### 피드백은 언제나 환영입니다.","path":"@supports 파헤치기"}]},"__N_SSG":true}