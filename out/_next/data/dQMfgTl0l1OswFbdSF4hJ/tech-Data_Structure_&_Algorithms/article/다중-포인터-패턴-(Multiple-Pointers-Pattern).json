{"pageProps":{"categories":[{"title":"blockchain","sub":[{"title":"DApp","count":1},{"title":"solidity","count":4}]},{"title":"platform","sub":[{"title":"AWS","count":2},{"title":"Google Analytics 4","count":1}]},{"title":"tech","sub":[{"title":"CS","count":1},{"title":"CSS","count":2},{"title":"Data_Structure_&_Algorithms","count":4},{"title":"HTML","count":1},{"title":"javascript","count":4},{"title":"markdown","count":1},{"title":"Next.js","count":1},{"title":"programming","count":3},{"title":"react","count":2},{"title":"refactoring","count":3},{"title":"typescript","count":2}]}],"data":{"title":"다중 포인터 패턴 (Multiple Pointers Pattern)","date":"2022-09-24","tags":["TIL","Udemy","Algorithm","다중 포인터 패턴","Multiple Pointers Pattern"],"draft":false,"summary":"여러 문제해결 패턴 중 다중 포인터 패턴에 대해 알아보자"},"content":"\r\n&nbsp;\r\n\r\n# 1. 다중 포인터 패턴 (Multiple Pointers Pattern)\r\n\r\n- 인덱스나 위치에 해당하는 `포인터나 값`을 만든 다음 특정 조건에 따라 중간 지점에서부터 `시작 지점`이나 `끝 지점`이나 `양쪽 지점`을 향해 이동시킨다.\r\n- 두 개의 포인터를 지정하고 포인터의 위치를 변경하면서 `특정 조건에 맞는 쌍 or 값`을 찾는 것\r\n\r\n&nbsp;\r\n\r\n> e.g. 정렬된 배열을 취하는 `sumZero` 라는 함수 작성.\r\n오름차순으로 정렬되어 있어야 한다.\r\n처음으로 합해서 0이 되는 쌍을  찾으면 된다.\r\n\r\n\r\n## 일반적인 패턴\r\n- 시간 복잡도 : `O(n^2)`\r\n- 공간 복잡도 : `O(1)`\r\n- `for문`이중 반복문을 사용한다.\r\n\r\n```js\r\nconst sumZero = (arr) => {\r\n    for(const i in arr) {\r\n        for (const j in arr) {\r\n        // 합이 0이면 해당 값들 리턴\r\n        // 나올 때까지 돈다... 돌다가 나오면 리턴 아니면 끝까지 쭉 하고 undefined\r\n         if(arr[i] + arr[j] === 0) {\r\n             return [arr[i], arr[j]]\r\n         }\r\n        }\r\n    }\r\n};\r\nsumZero([-4, -3, -2, -1, 0 , 1, 2, 5]) // [-2, 2]\r\n```\r\n\r\n## 빈도  카운터 패턴\r\n\r\n- 시간 복잡도 : `O(n)`\r\n- 공간 복잡도 : `O(1)`\r\n- 양 끝에 인덱스를 포인터로 지정하고 합이 0에 맞는 값을 찾아나가는 과정이다.\r\n- 합이 0이 안된다면 좌, 우의 포인터를 한 칸씩 번갈아서 가운데 방향을 이동시키면서 합이 0이되는 인덱스의 값을 찾아낸다.\r\n\r\n```js\r\nconst sumZero = (arr) => {\r\n    let left = 0; // 배열의 첫번째 인덱스 지정\r\n    let right = arr.length - 1; // 배열의 끝 지점에 인덱스 지정\r\n\r\n    while(left < right) {\r\n      const sumNumber = arr[left] + arr[right];\r\n        // 합이 0이면 해당 값들 리턴\r\n        if(sumNumber === 0) {\r\n            return [arr[left], arr[right]]\r\n        // 합이 0보다 크면 우측 포지션 -1\r\n        } else if (arr[left] + arr[right] > 0) {\r\n            right--;\r\n        //합이 0보다 작거나 같으면 좌측 포지션 + 1\r\n        } else {\r\n            left++;\r\n        }\r\n    }\r\n};\r\n\r\nsumZero([-4, -3, -2, -1, 0 , 1, 2, 5])\r\n```\r\n\r\n---\r\n\r\n#### 피드백은 언제나 환영입니다."},"__N_SSG":true}