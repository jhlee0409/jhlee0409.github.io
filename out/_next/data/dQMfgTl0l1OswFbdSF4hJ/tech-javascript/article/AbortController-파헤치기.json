{"pageProps":{"categories":[{"title":"blockchain","sub":[{"title":"DApp","count":1},{"title":"solidity","count":4}]},{"title":"platform","sub":[{"title":"AWS","count":2},{"title":"Google Analytics 4","count":1}]},{"title":"tech","sub":[{"title":"CS","count":1},{"title":"CSS","count":2},{"title":"Data_Structure_&_Algorithms","count":4},{"title":"HTML","count":1},{"title":"javascript","count":4},{"title":"markdown","count":1},{"title":"Next.js","count":1},{"title":"programming","count":3},{"title":"react","count":2},{"title":"refactoring","count":3},{"title":"typescript","count":2}]}],"data":{"title":"AbortController 파헤치기","date":"2022-09-09","tags":["TIL","Javascript","AbortController","signal","abort()"],"draft":false,"summary":"AbortController 통해 API 요청을 취소해보자"},"content":"\r\n# AbortController란?\r\n\r\n- 하나 이상의 웹 요청을 취소할 수 있게 해준다.\r\n- `new` 키워드를 이용해 `AbortController` 객체 인스턴스를 생성한다.\r\n\r\n\r\n# AbortController 구성요소\r\n\r\n- `AbortController.signal` : DOM 요청과 통신하기 위한 객체\r\n- `AbortController.abort()`: DOM 요청이 완료되기 전에 취소한다.\r\n    - 호출시 `catch`문으로 바로 넘어간다\r\n    - `abort()` 통해 취소하면 `network status`에 상태코드가 아닌 `canceled`라고 뜬다.\r\n    - 이벤트리스너를 통해서 `abort()` 호출 가능\r\n## `abort()` 호출 시점에 따른 차이\r\n\r\n1. API 요청 전\r\n    - occur error : `AbortError: Failed to execute 'fetch' on 'Window': The user aborted a request`.\r\n2. API 요청 성공 시점\r\n    - `abort()` 메소드 무시하고 정상 진행\r\n3. API 요청 끝난 후\r\n    - occur error : `AbortError: The user aborted a request.`\r\n4. `finally()` 메소드 호출 시점\r\n    - `abort()` 메소드 무시하고 정상 진행\r\n\r\n# 사용법\r\n- API 호출 시 `option`에 `signal`객체 추가\r\n- API 요청 끝난 후 `abort()` 호출\r\n\r\n## fetch 사용시\r\n```javascript\r\nconst controller = new AbortController();\r\n\r\nfetch('/foo/bar', {\r\n    signal: controller.signal\r\n })\r\n  .then((res) => res.json())\r\n  .then((data) => {\r\n    console.log(data);\r\n  })\r\n  .catch((err) => console.log(\"err: \" + err))\r\n    // log => \"err: AbortError: The user aborted a request.\"\r\n\r\n// 요청 취소\r\ncontroller.abort();\r\n```\r\n\r\n## axios 사용시\r\n```javascript\r\nconst controller = new AbortController();\r\n\r\naxios.get('/foo/bar', {\r\n   signal: controller.signal\r\n}).then((res) => {\r\n   //...\r\n})\r\n.catch((err) => console.log(\"err: \" + err));\r\n    // log => \"err: AbortError: The user aborted a request.\"\r\n\r\n// 요청 취소\r\ncontroller.abort()\r\n```\r\n\r\n#\r\n### 참조\r\n\r\n- [AbortController](https://developer.mozilla.org/ko/docs/Web/API/AbortController)\r\n- [Cancellation | Axios Docs](https://axios-http.com/docs/cancellation)\r\n#\r\n\r\n#### 피드백은 언제나 환영입니다."},"__N_SSG":true}