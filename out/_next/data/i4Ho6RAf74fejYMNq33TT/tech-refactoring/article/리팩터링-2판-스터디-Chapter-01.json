{"pageProps":{"categories":[{"title":"tech","sub":[{"title":"refactoring","count":3},{"title":"typescript","count":1}]}],"data":{"title":"리팩터링 2판 스터디 Chapter 01","date":"2022-04-01","tags":["TIL","Javascrpit","Refactoring 2nd"],"draft":false,"summary":"Chapter 01 - 리팩터링: 첫 번째 예시"},"content":"\n# 리팩터링 2판 스터디\n\n## Chapter 01 - 리팩터링: 첫 번째 예시\n\n1. 프로그램이 새로운 기능을 추가하기에 편한 구조가 아니라면, 먼저 기능을 추가하기 쉬운 형태로 리팩터링하고 나서 원하는 기능을 추가한다.\n2. 리팩터링하기 전에 제대로 된 테스트부터 마련한다. 테스트는 반드시 자가진단하도록 만든다.\n3. 컴퓨터가 이해하는 코드는 바보도 작성할 수 있다. 사람이 이해하도록 작성하는 프로그래머가 진정한 실력자다\n\n- 함수쪼개기 작업\n  - 함수 추출하기\n  - 쪼갤려는 함수와 관련있는 문장들 한군데 모으기\n    - (변수 초기화선언을 관련 함수 앞라인에 모은다거나)\n- 임시 변수를 질의 함수로 바꾸기\n- 반복문을 파이프라인으로 바꾸기\n- 반복문 쪼개기\n- 조건부 로직을 다형성으로 바꾸기\n- 임시변수 삭제 및 변수 인라인하기\n\n```jsx\n//리팩터링 전...\nlet result = ``;\nconst sampleFunction = () => {\n  //...\n};\n\nlet sample = sampleFunction();\nresult += sample;\n\n//리팩터링 후\nlet result = ``;\nconst sampleFunction = () => {\n  //...\n};\n\n// 임시변수 제거 => let sample = sampleFunction();\nresult += sampleFunction();\n```\n\n- 매개변수 간소화\n\n1. 반복문 쪼개기 → 변수 값을 누적시키는 부분을 분리\n2. 문장 슬라이드하기 → 변수 초기화 문장을 변수 값 누적 코드 바로 앞으로 옮김\n3. 함수 추출하기→ 특정 내부 로직을 별도 함수로 추출\n4. 변수 인라인하기 → 변수 제거\n\n## Chapter 02 - 리팩터링 원칙\n"},"__N_SSG":true}