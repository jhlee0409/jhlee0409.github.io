{"pageProps":{"categories":[{"title":"blockchain","sub":[{"title":"DApp","count":1},{"title":"solidity","count":4}]},{"title":"platform","sub":[{"title":"AWS","count":2},{"title":"Google Analytics 4","count":1}]},{"title":"tech","sub":[{"title":"CS","count":1},{"title":"CSS","count":2},{"title":"Data_Structure_&_Algorithms","count":12},{"title":"HTML","count":1},{"title":"javascript","count":4},{"title":"markdown","count":1},{"title":"Next.js","count":1},{"title":"programming","count":3},{"title":"react","count":2},{"title":"refactoring","count":3},{"title":"typescript","count":2}]}],"data":{"title":"네이밍 컨벤션 파헤치기","date":"2022-08-20","tags":["TIL","Programming","Naming Convention"],"draft":false,"summary":"Naming Convention, Pascal, Camel, Snake, Kebab, Hungarian"},"content":"# 네이밍 컨벤션 파헤치기\r\n## 네이밍 컨벤션 종류\r\n- 각 영단어에 대한 네이밍에 대해 여러 종류가 있다\r\n1. 카멜 케이스 (camelCase)\r\n2. 파스칼 케이스 (PascalCase)\r\n3. 스네이크 케이스 (snake_case)\r\n4. 케밥 케이스 (kebab-case)\r\n5. 헝가리언 표기법 (Hungarian Notation)\r\n\r\n## WHY?\r\n- 이러한 네이밍 컨벤션이 왜 필요할까?\r\n- 위의 컨벤션들은 모두 영어 합성어에 대한 기법이다.\r\n- 프로그래밍에서 여러 언어들은 각각 정해놓은 명령어와 선언방식이 있고 그걸 따르기 위해서 띄어쓰기를 이용한다.\r\n  그렇기에 띄어쓰기를 하게되면 여러 단어를 하나로 묶어 표현할 수 없게된다.\r\n- 그렇다고 모든 영단어를 띄어쓰기 없이 소문자로 적게되면\r\n  가독성이 떨어질 뿐더러 특수한 상황(e.g. class의 이름)에서의 명명을 소문자로 하게된다면 오류를 범하게 된다.\r\n\r\n\r\n- 이러한 여러 컨벤션들은 각 팀의 합의 하에 정해진다\r\n- 각 케이스가 어떠한 경우에 사용되는지 또 어떻게 사용하는지 알아보자\r\n\r\n## 사용법\r\n- 기본적으로 영어합성어에서 표기하는 기법\r\n1. 카멜케이스\r\n    - 유래\r\n        - 쌍봉낙타의 등과 비슷하게 생겨서 붙여진 이름\r\n    -  주로 `파일, 변수, 함수` 등 대상의 이름을 `띄어쓰기 없이` 짓는다.\r\n    - 합성어에서 기본적으로 소문자로 적되, `첫 단어를 제외`한 모든 단어의 `첫 글자는 대문자`로 표기한다.\r\n    - e.g. camelCase, isOpen, setState, namingConvention\r\n\r\n2. 파스칼 케이스\r\n    - 유래\r\n        - 파스칼 언어에서 사용하던 표기법이어서 붙여진 이름\r\n    - 주로 `클래스` 등 대상의 이름을 `띄어쓰기 없이` 짓는다.\r\n    - 합성어에서 기본적으로 소문자로 적되, 모든 단어의 `첫 글자는 대문자`로 표기한다.\r\n    - e.g. PascalCase, MyClass, MyComponent, NamingConvention\r\n\r\n3. 스네이크 케이스\r\n    - 유래\r\n        - 뱀의 형태와 비슷하게 생겨서 붙여진 이름\r\n    - 주로 `파일, 변수, 함수, 상수` 등 각 단어를 띄어쓰기 대신 `_`로 이어 붙여 짓는다.\r\n    - e.g. snake_case, is_open, ENUM_TYPE, naming_convention\r\n\r\n4. 케밥 케이스\r\n    - 유래\r\n        - 케밥 꼬챙이의 모습과 비슷하게 생겨서 붙여진 이름\r\n    - 주로 `url` 등 각 단어를 띄어쓰기 대신 `-`로 이어 붙여 짓는다.\r\n    - e.g. kebab-case, is-open, set-state, naming-convention\r\n\r\n5. 헝가리언 케이스\r\n    - 유래\r\n        - 해당 표기법을 만든 사람이 헝가리인이어서 붙여진 이름\r\n    - 변수명 앞에 `데이터 타입`을 붙여 짓는다.\r\n    - 타입이 바뀌면 변수명도 바뀌어야 하는 문제 때문에 이제는 지양하는 방향\r\n    - e.g. int -> iNumber, str -> strName\r\n\r\n\r\n\r\n\r\n#### 참조\r\n- [카멜 표기법 ](https://ko.wikipedia.org/wiki/%EC%B9%B4%EB%A9%9C_%ED%91%9C%EA%B8%B0%EB%B2%95)\r\n- [스네이크 표기법](https://ko.wikipedia.org/wiki/%EC%8A%A4%EB%84%A4%EC%9D%B4%ED%81%AC_%ED%91%9C%EA%B8%B0%EB%B2%95)\r\n- [Case Styles: Camel, Pascal, Snake, and Kebab Case](https://betterprogramming.pub/string-case-styles-camel-pascal-snake-and-kebab-case-981407998841)\r\n- [카멜, 파스칼, 스네이크, 헝가리안, 케밥 표기법 정리](https://needjarvis.tistory.com/632)\r\n\r\n#### 피드백은 언제나 환영입니다."},"__N_SSG":true}