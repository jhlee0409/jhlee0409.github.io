{"pageProps":{"categories":[{"title":"blockchain","sub":[{"title":"DApp","count":1},{"title":"solidity","count":4}]},{"title":"platform","sub":[{"title":"AWS","count":2},{"title":"Google Analytics 4","count":1}]},{"title":"tech","sub":[{"title":"CS","count":1},{"title":"CSS","count":2},{"title":"Data_Structure_&_Algorithms","count":7},{"title":"HTML","count":1},{"title":"javascript","count":4},{"title":"markdown","count":1},{"title":"Next.js","count":1},{"title":"programming","count":3},{"title":"react","count":2},{"title":"refactoring","count":3},{"title":"typescript","count":2}]}],"data":{"title":"AWS CodeBuild Webhook 이벤트 설정하기","date":"2022-09-02","tags":["TIL","AWS","CodeBuild","Webhook 이벤트"],"draft":false,"summary":"특정 레포지토리에 특정 이벤트가 일어났을 때만 자동으로 빌드 시작하기"},"content":"\n# 서론\n\n- `AWS CodeBuild`를 사용하다보면 특정 상황에서만 동작하도록 설정해야할 때가 있다.\ne.g. `master branch`에 `merge`가 되었을 때 빌드 시작\n- `AWS CodeBuild`의 간단한 설정 만으로 해당 기능을 구현할 수 있다.\n- 소스 코드의 변경을 자동적으로 감지하고 특정 상황에서만 빌드 트리거가 발생하도록 설정해보겠다.\n\n- 이미 `AWS CodeBuild`의 빌드 프로젝트가 생성되어 있다고 가정하겠다.\n- `AWS CodeBuild`의 설명과 생성 프로세스는 추후 포스팅해서 다루도록 하겠다.\n\n# 설정 프로세스\n\n## 1.  특정 빌드 프로젝트로 이동\n\n![빌드 프로젝트 설정](/assets/posts/til/AWS/AWS-CodeBuild-Webhook-이벤트-설정하기/00.png)\n\n## 2. 우측 상단 `편집` 클릭 후 `소스`클릭\n\n![편집 -> 소스 클릭](/assets/posts/til/AWS/AWS-CodeBuild-Webhook-이벤트-설정하기/01.png)\n\n\n## 3. WebHook 이벤트 활성화\n\n### 3-1 아래의 체크 박스를 클릭하면 설정 가능한 항목들이 나타난다.\n\n![Webhook 활성화](/assets/posts/til/AWS/AWS-CodeBuild-Webhook-이벤트-설정하기/02.png)\n\n\n### 3-2 우리가 이번에 설정할 항목들은 아래와 같다.\n\n1. `이벤트 유형` 설정\n2. `HEAD_REF`와 `BASE_REF` 설정\n\n![Webhook 항목 선택](/assets/posts/til/AWS/AWS-CodeBuild-Webhook-이벤트-설정하기/03.png)\n\n\n### 3-3 이벤트 유형 클릭 시 아래와 같은 4가지 선택사항이 있다. (중복 선택 가능)\n\n- `PUSH` : 해당 소스 코드의 branch 상관없이 Push가 일어나면 자동으로 빌드 시작\n- `PULL_REQUEST_CREATED` : 풀 리퀘스트가 생성되었을 때 자동으로 빌드 시작\n- `PULL_REQUEST_UPDATED` : 풀 리퀘스트가 업데이트 되었을 때 자동으로 빌드 시작\n- `PULL_REQUEST_MERGED` : 생성된 풀 리퀘스트가 병합을 완료했을 때 자동으로 빌드시작\n\n![이벤트 유형 선택](/assets/posts/til/AWS/AWS-CodeBuild-Webhook-이벤트-설정하기/04.png)\n\n### 3-4 특정 조건 생성하기\n\n- `HEAD_REF` : 출발점\n- `BASE_REF` : 도착점\n- e.g. 만약 위에서 `PULL_REQUEST_MERGED`만 선택했을 경우\n    - `dev(HEAD_REF) branch`  에서 `main(BASE_REF) branch` 로 풀 리퀘스트가 생성되고 병합이 완료되었을 때 빌드 시작\n- `BASE_REF`와 `HEAD_REF`에는 `정규식`을 입력해야하는 데 `^refs/heads/${브랜치 이름}$` 으로 입력해두면 일치하는 브랜치를 `참조`한다.\n- `BASE_REF` 의 경우 PULL 요청에서만 작동한다.\n\n![추가 조건 설정](/assets/posts/til/AWS/AWS-CodeBuild-Webhook-이벤트-설정하기/05.png)\n\n### 3-5 특정 조건 완성\n\n- 아래와 같은 조건으로 설정했다면 `dev → main` 으로 생성된 `풀 리퀘스트`가 `병합이 완료`되면 빌드를 자동으로 시작\n\n![Webhook 설정 완료](/assets/posts/til/AWS/AWS-CodeBuild-Webhook-이벤트-설정하기/06.png)\n\n### 3-6 설정 업데이트\n\n- `소스 업데이트` 클릭하면 설정 완료\n\n![업데이트 선택](/assets/posts/til/AWS/AWS-CodeBuild-Webhook-이벤트-설정하기/07.png)\n\n#\n\n### 참조\n\n[WebhookFilter](https://docs.aws.amazon.com/codebuild/latest/APIReference/API_WebhookFilter.html)\n\n#\n\n#### 피드백은 언제나 환영입니다."},"__N_SSG":true}