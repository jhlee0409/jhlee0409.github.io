{"pageProps":{"categories":[{"title":"blockchain","sub":[{"title":"DApp","count":1},{"title":"solidity","count":4}]},{"title":"platform","sub":[{"title":"AWS","count":2},{"title":"Google Analytics 4","count":1}]},{"title":"tech","sub":[{"title":"CS","count":1},{"title":"CSS","count":2},{"title":"Data_Structure_&_Algorithms","count":14},{"title":"HTML","count":1},{"title":"javascript","count":4},{"title":"markdown","count":1},{"title":"Next.js","count":1},{"title":"programming","count":3},{"title":"react","count":2},{"title":"refactoring","count":3},{"title":"typescript","count":2}]}],"data":{"title":"콜 스택 (Call Stack)","date":"2022-09-29","tags":["TIL","Udemy","콜 스택","호출 스택","Call Stack"],"draft":false,"summary":"콜 스택에 대해 알아보자"},"content":"\r\n&nbsp;\r\n\r\n# 1. 콜 스택 (Call Stack)\r\n\r\n- 대부분의 프로그래밍 언어에서는 함수 호출을 관리하는 데이터 구조가 있다.\r\n- 자바스크립트에서 함수 호출을 관리하는 것이 `콜 스택`이다.\r\n- `콜 스택`은 자바스크립트의 보이지 않는 곳에서 작동하는 정적 데이터 구조이다.\r\n- 함수를 호출하게 되면 `콜 스택`에 스택이 쌓이게 되고 가장 위에 쌓인 함수부터 처리후 `콜 스택`에서 제거된다.\r\n- `콜 스택`에서 제거되는 조건은 함수가 종료되거나 `return`을 하게 되었을 떄이다.\r\n\r\n&nbsp;\r\n\r\n# 콜 스택이 동작하는 과정\r\n\r\n- 콜 스택의 과정을 보여주기 위해 작성한 코드 이다.\r\n- `trigger` 함수에 `breakpoint`를 걸고 우측의 `콜 스택` 블럭을 통해 진행 과정을 알아보자\r\n\r\n![trigger 함수 호출](/assets/posts/til/DS&Al/콜스택/01.png)\r\n\r\n&nbsp;\r\n\r\n## 1. trigger 함수 호출\r\n\r\n- 먼저 `trigger` 함수가 호출되면 콜 스택에 쌓인다.\r\n\r\n![trigger 함수를 콜 스택에 추가](/assets/posts/til/DS&Al/콜스택/02.png)\r\n\r\n&nbsp;\r\n\r\n## 2. firstFn 함수 호출\r\n\r\n- 이전에 호출된 `trigger` 함수에서 `firstFn` 함수를 호출\r\n- 콜 스택에 `firstFn` 함수가 쌓이게 된다.\r\n- 아직 `trigger` 함수는 끝나지 않은 상태임과 동시에 가장 먼저 호출된 함수이기 때문에 가장 아래에 위치해 있다.\r\n\r\n![firstFn 함수를 콜 스택에 추가](/assets/posts/til/DS&Al/콜스택/03.png)\r\n\r\n- 이후 `firstFn` 함수는 `return` 을 한다.\r\n\r\n![firstFn 함수에서 값을 return](/assets/posts/til/DS&Al/콜스택/04.png)\r\n\r\n- `return`을 했으니 콜 스택에서 `firstFn` 함수는 제거 된다.\r\n\r\n![firstFn 함수를 콜 스택에서 제거](/assets/posts/til/DS&Al/콜스택/05.png)\r\n\r\n&nbsp;\r\n\r\n## 3. secondFn 함수 호출\r\n\r\n- `trigger` 함수에서 `firstFn` 함수가 호출/제거 된 후, `secondFn` 함수를 호출하게되면 콜 스택에 쌓인다.\r\n- 이 때도 아직 `trigger` 함수는 끝나지 않았기 때문에 아직 콜 스택에 남아있다.\r\n\r\n![secondFn 함수를 콜 스택에 추가](/assets/posts/til/DS&Al/콜스택/06.png)\r\n\r\n\r\n- 이 후 `secondFn` 함수에서 `generateNumber` 함수를 호출하면 콜스택에 쌓인다.\r\n- 이 때 아직 `secondFn` 함수는 끝나지 않았기 때문에 콜스택에 남아있다.\r\n> 사진에서 generateNumnber -> generateNumber 로 오타 정정\r\n\r\n![secondFn 함수에서 값을 return](/assets/posts/til/DS&Al/콜스택/07.png)\r\n\r\n\r\n- `generateNumber` 함수가 `1`이란 값을 `return` 했기 때문에 종료 후 콜 스택에서 제거된다.\r\n\r\n![secondFn 함수를 콜 스택에서 제거](/assets/posts/til/DS&Al/콜스택/08.png)\r\n\r\n\r\n- 이후 secondFn 함수는 `generateNumber` 함수에서 `return`된 값 `1`을 가지고 `return`을 하게 된다.\r\n- 이렇게 `secondFn` 함수도 `return`한 후 콜 스택에서 제거된다.\r\n\r\n&nbsp;\r\n\r\n## 4. trigger 함수 종료\r\n\r\n- `secondFn` 함수도 종료/제거가 되면서 `trigger`함수는 마지막 남은 `console.log`를 띄운다.\r\n\r\n![trigger 함수에서 condole.log를 띄움](/assets/posts/til/DS&Al/콜스택/09.png)\r\n\r\n\r\n- `console.log`를 띄운 후 `trigger` 함수도 종료가 된다.\r\n\r\n![trigger 함수에서 띄운 log](/assets/posts/til/DS&Al/콜스택/10.png)\r\n\r\n![trigger 함수를 콜 스택에서 제거](/assets/posts/til/DS&Al/콜스택/11.png)\r\n\r\n\r\n\r\n---\r\n\r\n#### 피드백은 언제나 환영입니다."},"__N_SSG":true}